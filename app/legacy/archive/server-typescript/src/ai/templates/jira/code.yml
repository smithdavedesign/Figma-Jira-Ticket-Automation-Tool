template_id: "universal-code-generation-v1"
version: "1.0.0"
organization: "default"
platform: "jira"
description: "Universal code generation template that adapts to any tech stack"

variables:
  component_name: "{{ figma.component_name }}"
  tech_stack: "{{ project.tech_stack }}"
  framework: "{{ calculated.primary_framework }}"
  styling_approach: "{{ calculated.styling_approach }}"
  testing_framework: "{{ calculated.testing_framework }}"
  design_ref: "{{ figma.frame_id }}"
  complexity_level: "{{ calculated.complexity }}"

team_standards:
  testing_framework: "framework-specific"
  accessibility_level: "wcag-aa"
  documentation_format: "markdown"
  code_style: "prettier"
  review_process: "standard"

output_format:
  ticket_type: "story"
  sections: ["title", "summary", "requirements", "design_context", "acceptance_criteria", "technical_implementation", "code_structure", "testing_strategy", "deployment_notes"]
  formatting:
    use_emojis: true
    include_diagrams: false
    code_highlighting: true
    table_formatting: true
    link_formatting: true
  ai_context_markers: true
  include_metadata: true

customization:
  include_ai_context_markers: true
  generate_test_files: true
  create_storybook_stories: true
  add_accessibility_checklist: true
  include_performance_metrics: true
  enable_automated_testing: true
  include_design_tokens: true
  add_similar_components: true
  include_risk_assessment: true
  generate_framework_code: true
  include_build_config: true
  add_deployment_scripts: true

content: |
  # 💻 {{ framework }} Component: {{ component_name }}

  ## 📋 Summary
  
  **Priority**: {{ calculated.priority }} | **Story Points**: {{ calculated.story_points }}
  
  **🔗 Figma Design**: [View Component]({{ figma.url }})
  **🎯 Tech Stack**: {{ tech_stack }}
  **🏗️ Framework**: {{ framework }}
  **🎨 Styling**: {{ styling_approach }}
  
  ## 🎯 Objective
  
  Implement the **{{ component_name }}** component using {{ framework }} with {{ styling_approach }} styling, following {{ tech_stack }} best practices and modern development standards.
  
  ## 🎨 Design Context
  
  - **Component Name**: {{ component_name }}
  - **Dimensions**: {{ figma.dimensions.width }}×{{ figma.dimensions.height }}px
  - **Complexity**: {{ calculated.complexity }}({{ calculated.hours }} hours)
  - **Dependencies**: {{ figma.dependencies }}
  - **Design System Integration**: Required
  
  ## ✅ Acceptance Criteria
  
  ### 🏗️ Component Structure
  - ✅ **{{ framework }} Implementation**: Clean, maintainable component architecture
  - ✅ **TypeScript Support**: Full type safety with proper interfaces (if TypeScript detected)
  - ✅ **Props Interface**: Well-defined component API with documentation
  - ✅ **State Management**: Appropriate state handling for component complexity
  
  ### 🎨 Visual & Styling Requirements
  - ✅ **Visual Accuracy**: Matches Figma design specifications exactly
  - ✅ **{{ styling_approach }} Implementation**: Proper styling architecture and organization
  - ✅ **Responsive Design**: Works across all supported breakpoints (mobile, tablet, desktop)
  - ✅ **Design System Compliance**: Uses approved design tokens and components
  - ✅ **Theme Support**: Supports light/dark mode (if applicable)
  
  ### ♿ Accessibility & Performance
  - ✅ **WCAG 2.1 AA Compliance**: Proper semantic markup, ARIA labels, keyboard navigation
  - ✅ **Performance Optimization**: Efficient rendering, proper memoization where needed
  - ✅ **Bundle Size**: Optimized for production build size
  - ✅ **Cross-browser Compatibility**: Works in all supported browsers
  
  ## 🔧 Technical Implementation
  
  ### 📁 Component Structure
  ```
  {{ component_name | lowercase }}/
  ├── index.ts                           # Export barrel
  ├── {{ component_name }}.tsx           # Main component
  ├── {{ component_name }}.types.ts      # TypeScript interfaces
  ├── {{ component_name }}.styles.ts     # Styled components / CSS modules
  ├── {{ component_name }}.stories.tsx   # Storybook stories
  ├── {{ component_name }}.test.tsx      # Unit tests
  └── hooks/                             # Custom hooks (if needed)
      └── use{{ component_name }}.ts
  ```
  
  ### 🎯 Component Implementation Templates
  
  {% if framework == "React" %}
  #### React Component Template
  ```tsx
  import React from 'react';
  import { {{ component_name }}Props } from './{{ component_name }}.types';
  import { StyledContainer } from './{{ component_name }}.styles';
  
  export const {{ component_name }}: React.FC<{{ component_name }}Props> = ({
    children,
    variant = 'default',
    size = 'medium',
    disabled = false,
    onClick,
    ...props
  }) => {
    return (
      <StyledContainer
        variant={variant}
        size={size}
        disabled={disabled}
        onClick={onClick}
        {...props}
      >
        {children}
      </StyledContainer>
    );
  };
  
  {{ component_name }}.displayName = '{{ component_name }}';
  ```
  {% endif %}
  
  {% if framework == "Vue" %}
  #### Vue Component Template
  ```vue
  <template>
    <div 
      :class="componentClasses" 
      @click="handleClick"
      v-bind="$attrs"
    >
      <slot />
    </div>
  </template>
  
  <script setup lang="ts">
  import { computed } from 'vue';
  import type { {{ component_name }}Props } from './{{ component_name }}.types';
  
  interface Props extends {{ component_name }}Props {
    variant?: 'default' | 'primary' | 'secondary';
    size?: 'small' | 'medium' | 'large';
    disabled?: boolean;
  }
  
  const props = withDefaults(defineProps<Props>(), {
    variant: 'default',
    size: 'medium',
    disabled: false,
  });
  
  const emit = defineEmits<{
    click: [event: MouseEvent];
  }>();
  
  const componentClasses = computed(() => [
    '{{ component_name | lowercase }}',
    `{{ component_name | lowercase }}--${props.variant}`,
    `{{ component_name | lowercase }}--${props.size}`,
    { '{{ component_name | lowercase }}--disabled': props.disabled }
  ]);
  
  const handleClick = (event: MouseEvent) => {
    if (!props.disabled) {
      emit('click', event);
    }
  };
  </script>
  
  <style scoped>
  /* Component styles here */
  </style>
  ```
  {% endif %}
  
  {% if framework == "Angular" %}
  #### Angular Component Template
  ```typescript
  import { Component, Input, Output, EventEmitter } from '@angular/core';
  
  @Component({
    selector: 'app-{{ component_name | lowercase }}',
    template: `
      <div 
        [class]="componentClasses"
        (click)="handleClick($event)"
      >
        <ng-content></ng-content>
      </div>
    `,
    styleUrls: ['./{{ component_name | lowercase }}.component.scss']
  })
  export class {{ component_name }}Component {
    @Input() variant: 'default' | 'primary' | 'secondary' = 'default';
    @Input() size: 'small' | 'medium' | 'large' = 'medium';
    @Input() disabled: boolean = false;
  
    @Output() clickEvent = new EventEmitter<MouseEvent>();
  
    get componentClasses(): string {
      return [
        '{{ component_name | lowercase }}',
        `{{ component_name | lowercase }}--${this.variant}`,
        `{{ component_name | lowercase }}--${this.size}`,
        this.disabled ? '{{ component_name | lowercase }}--disabled' : ''
      ].filter(Boolean).join(' ');
    }
  
    handleClick(event: MouseEvent): void {
      if (!this.disabled) {
        this.clickEvent.emit(event);
      }
    }
  }
  ```
  {% endif %}
  
  {% if framework == "AEM" %}
  #### AEM HTL Component Template
  ```html
  <!--/* {{ component_name }} AEM Component */-->
  <div data-sly-use.model="{{ resource_type }}"
       class="cmp-{{ component_name | lowercase }} ${model.cssClass @ context='attribute'}"
       data-cmp-is="{{ resource_type }}">
       
      <div data-sly-test="${model.title}" class="cmp-{{ component_name | lowercase }}__title">
          <h2>${model.title @ context='html'}</h2>
      </div>
      
      <div data-sly-test="${model.content}" class="cmp-{{ component_name | lowercase }}__content">
          ${model.content @ context='html'}
      </div>
      
  </div>
  ```
  
  #### Sling Model
  ```java
  @Model(adaptables = Resource.class, defaultInjectionStrategy = DefaultInjectionStrategy.OPTIONAL)
  public class {{ component_name }} {
      
      @ValueMapValue
      private String title;
      
      @ValueMapValue
      private String content;
      
      public String getTitle() { return title; }
      public String getContent() { return content; }
      
      public String getCssClass() {
          return "cmp-{{ component_name | lowercase }}";
      }
  }
  ```
  {% endif %}
  
  ### 🎨 Styling Implementation
  
  {% if styling_approach == "Styled Components" %}
  #### Styled Components
  ```tsx
  import styled, { css } from 'styled-components';
  import { {{ component_name }}Props } from './{{ component_name }}.types';
  
  export const StyledContainer = styled.div<{{ component_name }}Props>`
    /* Base styles */
    display: flex;
    align-items: center;
    justify-content: center;
    
    /* Variant styles */
    ${({ variant }) => variant === 'primary' && css`
      background-color: ${({ theme }) => theme.colors.primary};
      color: ${({ theme }) => theme.colors.onPrimary};
    `}
    
    /* Size variants */
    ${({ size }) => size === 'large' && css`
      padding: ${({ theme }) => theme.spacing.lg};
      font-size: ${({ theme }) => theme.typography.lg};
    `}
    
    /* States */
    ${({ disabled }) => disabled && css`
      opacity: 0.6;
      cursor: not-allowed;
    `}
  `;
  ```
  {% endif %}
  
  {% if styling_approach == "CSS Modules" %}
  #### CSS Modules
  ```css
  .container {
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .container--primary {
    background-color: var(--color-primary);
    color: var(--color-on-primary);
  }
  
  .container--large {
    padding: var(--spacing-lg);
    font-size: var(--font-size-lg);
  }
  
  .container--disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }
  ```
  {% endif %}
  
  ## 🧪 Testing Strategy
  
  ### {{ testing_framework }} Implementation
  ```tsx
  import { render, screen, fireEvent } from '@testing-library/react';
  import { {{ component_name }} } from './{{ component_name }}';
  
  describe('{{ component_name }}', () => {
    it('renders with default props', () => {
      render(<{{ component_name }}>Test Content</{{ component_name }}>);
      
      expect(screen.getByText('Test Content')).toBeInTheDocument();
    });
    
    it('handles click events', () => {
      const handleClick = jest.fn();
      render(
        <{{ component_name }} onClick={handleClick}>
          Clickable
        </{{ component_name }}>
      );
      
      fireEvent.click(screen.getByText('Clickable'));
      expect(handleClick).toHaveBeenCalledTimes(1);
    });
    
    it('applies disabled state correctly', () => {
      render(
        <{{ component_name }} disabled>
          Disabled Button
        </{{ component_name }}>
      );
      
      const button = screen.getByText('Disabled Button');
      expect(button).toHaveClass('{{ component_name | lowercase }}--disabled');
    });
    
    it('meets accessibility requirements', () => {
      const { container } = render(
        <{{ component_name }} aria-label="Test component">
          Accessible Content
        </{{ component_name }}>
      );
      
      expect(container.firstChild).toHaveAttribute('aria-label', 'Test component');
    });
  });
  ```
  
  ## 📚 Storybook Stories
  ```tsx
  import type { Meta, StoryObj } from '@storybook/react';
  import { {{ component_name }} } from './{{ component_name }}';
  
  const meta: Meta<typeof {{ component_name }}> = {
    title: 'Components/{{ component_name }}',
    component: {{ component_name }},
    parameters: {
      docs: {
        description: {
          component: 'A flexible {{ component_name | lowercase }} component built from Figma designs.'
        }
      }
    },
    argTypes: {
      variant: {
        control: 'select',
        options: ['default', 'primary', 'secondary']
      }
    }
  };
  
  export default meta;
  type Story = StoryObj<typeof {{ component_name }}>;
  
  export const Default: Story = {
    args: {
      children: 'Default {{ component_name }}'
    }
  };
  
  export const Primary: Story = {
    args: {
      variant: 'primary',
      children: 'Primary {{ component_name }}'
    }
  };
  
  export const Disabled: Story = {
    args: {
      disabled: true,
      children: 'Disabled {{ component_name }}'
    }
  };
  ```
  
  ## 🚀 Deployment & Integration
  
  ### Package.json Scripts
  ```json
  {
    "scripts": {
      "build": "{{ calculated.build_command }}",
      "test": "{{ calculated.test_command }}",
      "storybook": "{{ calculated.storybook_command }}",
      "lint": "{{ calculated.lint_command }}"
    }
  }
  ```
  
  ### Build Configuration
  - **{{ framework }} Version**: {{ calculated.framework_version }}
  - **Build Tool**: {{ calculated.build_tool }}
  - **Bundle Target**: {{ calculated.bundle_target }}
  
  ## 📋 Subtasks
  
  - [ ] 🏗️ Set up component folder structure
  - [ ] 📝 Implement {{ framework }} component with TypeScript
  - [ ] 🎨 Create {{ styling_approach }} styling implementation
  - [ ] 🔧 Set up component props and interfaces
  - [ ] 🧪 Write comprehensive {{ testing_framework }} tests
  - [ ] 📚 Create Storybook stories and documentation
  - [ ] ♿ Validate WCAG 2.1 AA accessibility compliance
  - [ ] 🚀 Test component integration in target environment
  - [ ] 📦 Configure build and deployment pipeline
  
  ## 🤖 AI Assistant Integration
  
  **GitHub Copilot Prompt**: "Generate a complete {{ framework }} component implementation for '{{ component_name }}' with TypeScript interfaces, {{ styling_approach }} styling, comprehensive {{ testing_framework }} tests, and Storybook stories. Focus on accessibility, performance, and {{ tech_stack }} best practices."
  
  **Claude/Cursor Prompt**: "Review this {{ framework }} component ticket for implementation completeness. Suggest improvements for component architecture, prop design, styling patterns, testing coverage, and integration with {{ tech_stack }} ecosystem."
  
  ---
  
  **🔍 Complexity Analysis**: {{ calculated.complexity }} | **⏱️ Estimated Hours**: {{ calculated.hours }} | **🎯 Confidence**: {{ calculated.confidence }}%