meta:
  tech_stack: react
  version: 1.0.0
  last_updated: 2025-10-30
  status: stable

standards:
  overview:
    name: "React Technology Stack"
    description: "Modern React development with TypeScript, modern tooling, and best practices"
    approach: "Component-driven development with hooks, context, and functional patterns"
    
  core_technologies:
    frontend_framework: "React 18+"
    language: "TypeScript"
    build_tool: "Vite"
    package_manager: "npm"
    
  styling_stack:
    primary: "CSS Modules"
    secondary: "Styled Components"
    utility: "Tailwind CSS (optional)"
    preprocessor: "SCSS/Sass"
    
  testing_stack:
    unit_testing: "Jest + React Testing Library"
    integration_testing: "React Testing Library"
    e2e_testing: "Playwright"
    visual_testing: "Storybook + Chromatic"
    
  development_tools:
    code_quality: "ESLint + Prettier"
    type_checking: "TypeScript"
    dev_server: "Vite Dev Server"
    documentation: "Storybook"
    
  state_management:
    local_state: "useState, useReducer"
    global_state: "Context API, Zustand, or Redux Toolkit"
    server_state: "React Query/TanStack Query"
    
  project_structure:
    components: "src/components/"
    hooks: "src/hooks/"
    utils: "src/utils/"
    types: "src/types/"
    pages: "src/pages/"
    services: "src/services/"
    
  naming_conventions:
    components: "PascalCase (Button.tsx)"
    hooks: "camelCase with 'use' prefix (useCounter.ts)"
    utilities: "camelCase (formatDate.ts)"
    constants: "UPPER_SNAKE_CASE"
    
# React Component Template
component_template:
  functional_component: |
    import React from 'react';
    import styles from './{{ figma.component_name }}.module.css';
    
    export interface {{ figma.component_name }}Props {
    {% for prop in figma.properties %}
      {{ prop.name }}{{ prop.required ? '' : '?' }}: {{ prop.type | default('string') }};
    {% endfor %}
      className?: string;
      children?: React.ReactNode;
    }
    
    export const {{ figma.component_name }}: React.FC<{{ figma.component_name }}Props> = ({
    {% for prop in figma.properties %}
      {{ prop.name }},
    {% endfor %}
      className,
      children,
      ...props
    }) => {
      return (
        <div 
          className={`${styles.{{ figma.component_name | camelCase }}} ${className || ''}`}
          {...props}
        >
          {children}
        </div>
      );
    };
    
    {{ figma.component_name }}.displayName = '{{ figma.component_name }}';
    
  component_styles: |
    /* {{ figma.component_name }}.module.css */
    .{{ figma.component_name | camelCase }} {
      /* Design tokens from Figma */
    {% for token in design_tokens.spacing %}
      --{{ token.name }}: {{ token.value }}px;
    {% endfor %}
    {% for token in design_tokens.colors %}
      --{{ token.name }}: {{ token.value }};
    {% endfor %}
      
      /* Component base styles */
      display: flex;
      flex-direction: column;
      gap: var(--spacing-md, 16px);
      
      /* Responsive design */
      @media (min-width: 768px) {
        flex-direction: row;
      }
    }
    
    .{{ figma.component_name | camelCase }}:hover {
      /* Hover state styles */
    }
    
    .{{ figma.component_name | camelCase }}:focus-visible {
      /* Focus styles for accessibility */
      outline: 2px solid var(--color-focus, #0066cc);
      outline-offset: 2px;
    }
    
  component_test: |
    import { render, screen, fireEvent } from '@testing-library/react';
    import { {{ figma.component_name }} } from './{{ figma.component_name }}';
    
    describe('{{ figma.component_name }}', () => {
      it('renders correctly', () => {
        render(<{{ figma.component_name }} />);
        expect(screen.getByRole('generic')).toBeInTheDocument();
      });
      
      it('applies custom className', () => {
        const customClass = 'custom-class';
        render(<{{ figma.component_name }} className={customClass} />);
        expect(screen.getByRole('generic')).toHaveClass(customClass);
      });
      
      it('renders children correctly', () => {
        const childText = 'Test child content';
        render(<{{ figma.component_name }}>{childText}</{{ figma.component_name }}>);
        expect(screen.getByText(childText)).toBeInTheDocument();
      });
      
      it('handles props correctly', () => {
    {% for prop in figma.properties %}
        // Test {{ prop.name }} prop
    {% endfor %}
      });
      
      it('meets accessibility requirements', () => {
        render(<{{ figma.component_name }} />);
        const component = screen.getByRole('generic');
        
        // Check for keyboard navigation
        fireEvent.focus(component);
        expect(component).toHaveFocus();
        
        // Add more accessibility tests as needed
      });
    });
    
  storybook_story: |
    import type { Meta, StoryObj } from '@storybook/react';
    import { {{ figma.component_name }} } from './{{ figma.component_name }}';
    
    const meta: Meta<typeof {{ figma.component_name }}> = {
      title: 'Components/{{ figma.component_name }}',
      component: {{ figma.component_name }},
      parameters: {
        layout: 'centered',
        docs: {
          description: {
            component: '{{ figma.description | default("Component description") }}'
          }
        }
      },
      tags: ['autodocs'],
      argTypes: {
    {% for prop in figma.properties %}
        {{ prop.name }}: {
          description: '{{ prop.description | default("Property description") }}',
          control: { type: '{{ prop.control_type | default("text") }}' }
        },
    {% endfor %}
        className: {
          description: 'Additional CSS classes',
          control: { type: 'text' }
        }
      }
    };
    
    export default meta;
    type Story = StoryObj<typeof meta>;
    
    export const Default: Story = {
      args: {
    {% for prop in figma.properties %}
        {{ prop.name }}: {{ prop.default_value | default('undefined') }},
    {% endfor %}
      }
    };
    
    export const WithCustomContent: Story = {
      args: {
        ...Default.args,
        children: 'Custom content example'
      }
    };
    
    // Add more story variants based on design states
    export const Hover: Story = {
      args: {
        ...Default.args,
      },
      parameters: {
        pseudo: { hover: true }
      }
    };
    
    export const Focus: Story = {
      args: {
        ...Default.args,
      },
      parameters: {
        pseudo: { focus: true }
      }
    };

# Hook Template
hook_template:
  custom_hook: |
    import { useState, useEffect, useCallback } from 'react';
    
    interface Use{{ figma.component_name }}Options {
      // Hook options
    }
    
    interface Use{{ figma.component_name }}Return {
      // Hook return type
    }
    
    export const use{{ figma.component_name }} = (
      options: Use{{ figma.component_name }}Options = {}
    ): Use{{ figma.component_name }}Return => {
      const [state, setState] = useState();
      
      const handleAction = useCallback(() => {
        // Hook logic
      }, []);
      
      useEffect(() => {
        // Effect logic
      }, []);
      
      return {
        state,
        handleAction
      };
    };
    
  hook_test: |
    import { renderHook, act } from '@testing-library/react';
    import { use{{ figma.component_name }} } from './use{{ figma.component_name }}';
    
    describe('use{{ figma.component_name }}', () => {
      it('initializes with correct default state', () => {
        const { result } = renderHook(() => use{{ figma.component_name }}());
        
        // Test initial state
        expect(result.current.state).toBeDefined();
      });
      
      it('handles actions correctly', () => {
        const { result } = renderHook(() => use{{ figma.component_name }}());
        
        act(() => {
          result.current.handleAction();
        });
        
        // Test state changes
      });
    });

# Documentation Templates
documentation_template:
  readme: |
    # {{ figma.component_name }} - React Component
    
    A modern, accessible React component built with TypeScript and best practices.
    
    ## Features
    
    - ✅ **TypeScript**: Full type safety and IntelliSense support
    - ✅ **Accessibility**: WCAG 2.1 AA compliant
    - ✅ **Responsive**: Mobile-first responsive design
    - ✅ **Testing**: Comprehensive test coverage
    - ✅ **Storybook**: Interactive documentation
    - ✅ **Performance**: Optimized for production
    
    ## Installation
    
    ```bash
    npm install @{{ project.name }}/{{ figma.component_name | kebabCase }}
    ```
    
    ## Usage
    
    ```tsx
    import { {{ figma.component_name }} } from '@{{ project.name }}/{{ figma.component_name | kebabCase }}';
    
    function App() {
      return (
        <{{ figma.component_name }}
    {% for prop in figma.properties %}
          {{ prop.name }}={{ prop.example_value | default('"example"') }}
    {% endfor %}
        >
          Component content
        </{{ figma.component_name }}>
      );
    }
    ```
    
    ## Props
    
    | Prop | Type | Default | Description |
    |------|------|---------|-------------|
    {% for prop in figma.properties %}
    | `{{ prop.name }}` | `{{ prop.type | default('string') }}` | `{{ prop.default | default('undefined') }}` | {{ prop.description | default('Property description') }} |
    {% endfor %}
    | `className` | `string` | `undefined` | Additional CSS classes |
    | `children` | `ReactNode` | `undefined` | Child elements |
    
    ## Styling
    
    The component uses CSS Modules for styling. You can override styles by:
    
    1. **CSS Custom Properties**: Override CSS variables
    2. **CSS Classes**: Use the `className` prop
    3. **CSS Modules**: Import and extend the styles
    
    ### CSS Variables
    
    ```css
    .my-component {
    {% for token in design_tokens.spacing %}
      --{{ token.name }}: {{ token.custom_value | default(token.value + 'px') }};
    {% endfor %}
    {% for token in design_tokens.colors %}
      --{{ token.name }}: {{ token.custom_value | default(token.value) }};
    {% endfor %}
    }
    ```
    
    ## Accessibility
    
    - **Keyboard Navigation**: Full keyboard support
    - **Screen Readers**: Proper ARIA attributes
    - **Focus Management**: Clear focus indicators
    - **Color Contrast**: WCAG AA compliant colors
    
    ## Browser Support
    
    - Chrome 90+
    - Firefox 88+
    - Safari 14+
    - Edge 90+
    
    ## Development
    
    ```bash
    # Install dependencies
    npm install
    
    # Start development server
    npm run dev
    
    # Run tests
    npm test
    
    # Run Storybook
    npm run storybook
    
    # Build for production
    npm run build
    ```
    
    ## Contributing
    
    1. Fork the repository
    2. Create a feature branch
    3. Make your changes
    4. Add tests for new functionality
    5. Run the test suite
    6. Submit a pull request
    
    ## License
    
    MIT License