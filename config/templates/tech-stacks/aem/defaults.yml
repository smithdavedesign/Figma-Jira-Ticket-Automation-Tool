meta:
  tech_stack: aem
  version: 1.0.0
  last_updated: 2025-10-30
  status: stable

standards:
  overview:
    name: "Adobe Experience Manager (AEM) Technology Stack"
    description: "AEM component development with HTL, Sling Models, and modern frontend practices"
    approach: "Component-driven development with AEM best practices and Touch UI authoring"
    
  core_technologies:
    platform: "Adobe Experience Manager 6.5+ / AEM Cloud Service"
    template_language: "HTL (HTML Template Language)"
    backend: "Java 11+ / Sling Models"
    frontend: "HTML5, CSS3, JavaScript ES6+"
    build_tool: "Maven / Webpack"
    
  aem_stack:
    component_framework: "AEM Core Components"
    clientlibs: "AEM Client Libraries"
    dialog_framework: "Touch UI / Coral UI"
    workflow: "AEM Workflow"
    
  frontend_stack:
    styling: "CSS3 / SCSS"
    javascript: "ES6+ / TypeScript"
    build_tools: "Webpack / Maven Frontend Plugin"
    ui_framework: "Coral UI / Granite UI"
    
  testing_stack:
    unit_testing: "JUnit 5"
    integration_testing: "AEM Testing Client"
    frontend_testing: "Jest"
    e2e_testing: "Selenium / Playwright"
    
  project_structure:
    components: "apps/[project]/components/"
    templates: "conf/[project]/settings/wcm/templates/"
    policies: "conf/[project]/settings/wcm/policies/"
    designs: "etc/designs/[project]/"
    clientlibs: "apps/[project]/clientlibs/"
    
  naming_conventions:
    components: "kebab-case (hero-banner)"
    java_classes: "PascalCase (HeroBannerModel)"
    properties: "camelCase (heroTitle)"
    nodes: "camelCase (heroTitle)"

# AEM Component Templates
component_template:
  htl_component: |
    <!--/* {{ figma.component_name }}.html */-->
    <div data-sly-use.model="{{ figma.component_name | pascalCase }}Model"
         class="cmp-{{ figma.component_name | kebabCase }} ${model.cssClasses @ context='attribute'}"
         data-cmp-is="{{ figma.component_name | kebabCase }}">
      
      <!--/* Component Title */-->
      <div data-sly-test="${model.title}" class="cmp-{{ figma.component_name | kebabCase }}__title">
        <h2>${model.title @ context='html'}</h2>
      </div>
      
      <!--/* Component Description */-->
      <div data-sly-test="${model.description}" class="cmp-{{ figma.component_name | kebabCase }}__description">
        <p>${model.description @ context='html'}</p>
      </div>
      
      <!--/* Component Content */-->
      <div class="cmp-{{ figma.component_name | kebabCase }}__content">
    {% for prop in figma.properties %}
        <!--/* {{ prop.name | capitalize }} */-->
        <div data-sly-test="${model.{{ prop.name }}}" class="cmp-{{ figma.component_name | kebabCase }}__{{ prop.name | kebabCase }}">
          ${model.{{ prop.name }} @ context='html'}
        </div>
    {% endfor %}
      </div>
      
      <!--/* Component Actions */-->
      <div data-sly-test="${model.hasActions}" class="cmp-{{ figma.component_name | kebabCase }}__actions">
        <div data-sly-repeat.action="${model.actions}">
          <a href="${action.url @ context='uri'}" 
             class="cmp-{{ figma.component_name | kebabCase }}__action"
             target="${action.target @ context='attribute'}">
            ${action.text @ context='text'}
          </a>
        </div>
      </div>
      
      <!--/* Component Image */-->
      <div data-sly-test="${model.image}" class="cmp-{{ figma.component_name | kebabCase }}__image">
        <img src="${model.image.src @ context='uri'}"
             alt="${model.image.alt @ context='attribute'}"
             class="cmp-{{ figma.component_name | kebabCase }}__image-element" />
      </div>
    </div>
    
  sling_model: |
    package {{ project.java_package }}.models;
    
    import com.adobe.cq.export.json.ComponentExporter;
    import com.adobe.cq.export.json.ExporterConstants;
    import org.apache.sling.api.SlingHttpServletRequest;
    import org.apache.sling.api.resource.Resource;
    import org.apache.sling.models.annotations.*;
    import org.apache.sling.models.annotations.injectorspecific.*;
    import javax.annotation.PostConstruct;
    import java.util.List;
    import java.util.ArrayList;
    
    @Model(
        adaptables = { SlingHttpServletRequest.class, Resource.class },
        adapters = { {{ figma.component_name | pascalCase }}Model.class, ComponentExporter.class },
        resourceType = {{ figma.component_name | pascalCase }}Model.RESOURCE_TYPE
    )
    @Exporter(name = ExporterConstants.SLING_MODEL_EXPORTER_NAME, extensions = ExporterConstants.JSON)
    public class {{ figma.component_name | pascalCase }}Model implements ComponentExporter {
    
        public static final String RESOURCE_TYPE = "{{ project.name }}/components/{{ figma.component_name | kebabCase }}";
    
        @SlingObject
        private Resource resource;
    
        @SlingObject
        private SlingHttpServletRequest request;
    
        @ValueMapValue
        @Default(values = "")
        private String title;
    
        @ValueMapValue
        @Default(values = "")
        private String description;
    
    {% for prop in figma.properties %}
        @ValueMapValue
        @Default({{ prop.default_annotation | default('values = ""') }})
        private {{ prop.java_type | default('String') }} {{ prop.name }};
    
    {% endfor %}
        @ChildResource
        private List<Resource> actions;
    
        private String cssClasses;
        private boolean hasActions;
    
        @PostConstruct
        private void init() {
            // Initialize component state
            this.cssClasses = buildCssClasses();
            this.hasActions = actions != null && !actions.isEmpty();
        }
    
        public String getTitle() {
            return title;
        }
    
        public String getDescription() {
            return description;
        }
    
    {% for prop in figma.properties %}
        public {{ prop.java_type | default('String') }} get{{ prop.name | capitalize }}() {
            return {{ prop.name }};
        }
    
    {% endfor %}
        public List<ActionItem> getActions() {
            List<ActionItem> actionItems = new ArrayList<>();
            if (actions != null) {
                for (Resource action : actions) {
                    actionItems.add(new ActionItem(action));
                }
            }
            return actionItems;
        }
    
        public boolean getHasActions() {
            return hasActions;
        }
    
        public String getCssClasses() {
            return cssClasses;
        }
    
        private String buildCssClasses() {
            StringBuilder classes = new StringBuilder();
            classes.append("cmp-{{ figma.component_name | kebabCase }}");
            
            // Add conditional classes based on properties
    {% for prop in figma.properties %}
            if ({{ prop.name }} != null && !{{ prop.name }}.isEmpty()) {
                classes.append(" cmp-{{ figma.component_name | kebabCase }}--has-{{ prop.name | kebabCase }}");
            }
    {% endfor %}
            
            return classes.toString();
        }
    
        @Override
        public String getExportedType() {
            return RESOURCE_TYPE;
        }
        
        // Inner class for action items
        public static class ActionItem {
            private final String text;
            private final String url;
            private final String target;
            
            public ActionItem(Resource actionResource) {
                this.text = actionResource.getValueMap().get("text", String.class);
                this.url = actionResource.getValueMap().get("url", String.class);
                this.target = actionResource.getValueMap().get("target", "_self");
            }
            
            public String getText() { return text; }
            public String getUrl() { return url; }
            public String getTarget() { return target; }
        }
    }
    
  component_dialog: |
    <?xml version="1.0" encoding="UTF-8"?>
    <jcr:root xmlns:sling="http://sling.apache.org/jcr/sling/1.0"
              xmlns:granite="http://www.adobe.com/jcr/granite/1.0"
              xmlns:cq="http://www.day.com/jcr/cq/1.0"
              xmlns:jcr="http://www.jcp.org/jcr/1.0"
              xmlns:nt="http://www.jcp.org/jcr/nt/1.0"
              jcr:primaryType="nt:unstructured"
              jcr:title="{{ figma.component_name }}"
              sling:resourceType="cq/gui/components/authoring/dialog"
              extraClientlibs="[{{ project.name }}.authoring]"
              helpPath="{{ project.help_url }}/{{ figma.component_name | kebabCase }}.html"
              trackingFeature="aem:sites:components:{{ figma.component_name | kebabCase }}">
        <content
            jcr:primaryType="nt:unstructured"
            sling:resourceType="granite/ui/components/coral/foundation/container">
            <items jcr:primaryType="nt:unstructured">
                <tabs
                    jcr:primaryType="nt:unstructured"
                    sling:resourceType="granite/ui/components/coral/foundation/tabs"
                    maximized="{Boolean}true">
                    <items jcr:primaryType="nt:unstructured">
                        <!-- Main Content Tab -->
                        <content
                            jcr:primaryType="nt:unstructured"
                            jcr:title="Content"
                            sling:resourceType="granite/ui/components/coral/foundation/container"
                            margin="{Boolean}true">
                            <items jcr:primaryType="nt:unstructured">
                                <!-- Title Field -->
                                <title
                                    jcr:primaryType="nt:unstructured"
                                    sling:resourceType="granite/ui/components/coral/foundation/form/textfield"
                                    fieldDescription="Enter the component title"
                                    fieldLabel="Title"
                                    name="./title"
                                    required="{Boolean}false" />
                                
                                <!-- Description Field -->
                                <description
                                    jcr:primaryType="nt:unstructured"
                                    sling:resourceType="granite/ui/components/coral/foundation/form/textarea"
                                    fieldDescription="Enter the component description"
                                    fieldLabel="Description"
                                    name="./description"
                                    rows="3" />
                                
    {% for prop in figma.properties %}
                                <!-- {{ prop.name | capitalize }} Field -->
                                <{{ prop.name }}
                                    jcr:primaryType="nt:unstructured"
                                    sling:resourceType="granite/ui/components/coral/foundation/form/{{ prop.dialog_type | default('textfield') }}"
                                    fieldDescription="{{ prop.description | default('Enter ' + prop.name) }}"
                                    fieldLabel="{{ prop.label | default(prop.name | capitalize) }}"
                                    name="./{{ prop.name }}"
                                    {{ prop.dialog_attributes | default('required="{Boolean}false"') }} />
                                
    {% endfor %}
                            </items>
                        </container>
                        
                        <!-- Actions Tab -->
                        <actions
                            jcr:primaryType="nt:unstructured"
                            jcr:title="Actions"
                            sling:resourceType="granite/ui/components/coral/foundation/container"
                            margin="{Boolean}true">
                            <items jcr:primaryType="nt:unstructured">
                                <actions
                                    jcr:primaryType="nt:unstructured"
                                    sling:resourceType="granite/ui/components/coral/foundation/form/multifield"
                                    fieldDescription="Add action items"
                                    fieldLabel="Actions">
                                    <field
                                        jcr:primaryType="nt:unstructured"
                                        sling:resourceType="granite/ui/components/coral/foundation/container"
                                        name="./actions">
                                        <items jcr:primaryType="nt:unstructured">
                                            <text
                                                jcr:primaryType="nt:unstructured"
                                                sling:resourceType="granite/ui/components/coral/foundation/form/textfield"
                                                fieldLabel="Action Text"
                                                name="text" />
                                            <url
                                                jcr:primaryType="nt:unstructured"
                                                sling:resourceType="granite/ui/components/coral/foundation/form/pathfield"
                                                fieldLabel="Action URL"
                                                name="url"
                                                rootPath="/content" />
                                            <target
                                                jcr:primaryType="nt:unstructured"
                                                sling:resourceType="granite/ui/components/coral/foundation/form/select"
                                                fieldLabel="Target"
                                                name="target">
                                                <items jcr:primaryType="nt:unstructured">
                                                    <self
                                                        jcr:primaryType="nt:unstructured"
                                                        text="Same Window"
                                                        value="_self" />
                                                    <blank
                                                        jcr:primaryType="nt:unstructured"
                                                        text="New Window"
                                                        value="_blank" />
                                                </items>
                                            </target>
                                        </items>
                                    </field>
                                </multifield>
                            </items>
                        </container>
                        
                        <!-- Styling Tab -->
                        <styling
                            jcr:primaryType="nt:unstructured"
                            jcr:title="Styling"
                            sling:resourceType="granite/ui/components/coral/foundation/container"
                            margin="{Boolean}true">
                            <items jcr:primaryType="nt:unstructured">
                                <cssClasses
                                    jcr:primaryType="nt:unstructured"
                                    sling:resourceType="granite/ui/components/coral/foundation/form/textfield"
                                    fieldDescription="Additional CSS classes"
                                    fieldLabel="CSS Classes"
                                    name="./cssClasses" />
                            </items>
                        </container>
                    </items>
                </tabs>
            </items>
        </content>
    </jcr:root>
    
  component_styles: |
    /* {{ figma.component_name | kebabCase }}.scss */
    
    .cmp-{{ figma.component_name | kebabCase }} {
      /* Design tokens from Figma */
    {% for token in design_tokens.spacing %}
      --{{ token.name }}: {{ token.value }}px;
    {% endfor %}
    {% for token in design_tokens.colors %}
      --{{ token.name }}: {{ token.value }};
    {% endfor %}
      
      /* Component base styles */
      display: block;
      margin: var(--spacing-lg, 24px) 0;
      
      &__title {
        font-size: var(--font-size-h2, 2rem);
        font-weight: var(--font-weight-bold, 700);
        color: var(--color-text-primary, #000);
        margin-bottom: var(--spacing-md, 16px);
      }
      
      &__description {
        font-size: var(--font-size-body, 1rem);
        color: var(--color-text-secondary, #666);
        line-height: var(--line-height-body, 1.6);
        margin-bottom: var(--spacing-md, 16px);
      }
      
      &__content {
        display: flex;
        flex-direction: column;
        gap: var(--spacing-sm, 12px);
      }
      
      &__actions {
        display: flex;
        gap: var(--spacing-sm, 12px);
        margin-top: var(--spacing-md, 16px);
        
        @media (max-width: 768px) {
          flex-direction: column;
        }
      }
      
      &__action {
        display: inline-flex;
        align-items: center;
        padding: var(--spacing-sm, 12px) var(--spacing-md, 16px);
        background-color: var(--color-primary, #0066cc);
        color: var(--color-white, #fff);
        text-decoration: none;
        border-radius: var(--border-radius, 4px);
        font-weight: var(--font-weight-medium, 500);
        transition: all 0.2s ease;
        
        &:hover {
          background-color: var(--color-primary-dark, #0052a3);
          transform: translateY(-1px);
        }
        
        &:focus {
          outline: 2px solid var(--color-focus, #0066cc);
          outline-offset: 2px;
        }
        
        &:active {
          transform: translateY(0);
        }
      }
      
      &__image {
        margin-top: var(--spacing-md, 16px);
      }
      
      &__image-element {
        width: 100%;
        height: auto;
        border-radius: var(--border-radius, 4px);
      }
      
      /* Component variants */
      &--has-image {
        .cmp-{{ figma.component_name | kebabCase }}__content {
          display: grid;
          grid-template-columns: 1fr 300px;
          gap: var(--spacing-lg, 24px);
          align-items: start;
          
          @media (max-width: 768px) {
            grid-template-columns: 1fr;
          }
        }
      }
      
      /* Responsive styles */
      @media (max-width: 768px) {
        margin: var(--spacing-md, 16px) 0;
        
        &__title {
          font-size: var(--font-size-h3, 1.5rem);
        }
        
        &__content {
          gap: var(--spacing-xs, 8px);
        }
      }
    }

# AEM Testing Templates
test_template:
  junit_test: |
    package {{ project.java_package }}.models;
    
    import static org.junit.jupiter.api.Assertions.*;
    import static org.mockito.Mockito.*;
    
    import org.apache.sling.api.resource.Resource;
    import org.apache.sling.api.resource.ValueMap;
    import org.apache.sling.testing.mock.sling.junit5.SlingContext;
    import org.apache.sling.testing.mock.sling.junit5.SlingContextExtension;
    import org.junit.jupiter.api.BeforeEach;
    import org.junit.jupiter.api.Test;
    import org.junit.jupiter.api.extension.ExtendWith;
    
    @ExtendWith(SlingContextExtension.class)
    class {{ figma.component_name | pascalCase }}ModelTest {
    
        private final SlingContext context = new SlingContext();
        private {{ figma.component_name | pascalCase }}Model model;
        private Resource resource;
    
        @BeforeEach
        void setUp() {
            // Setup test resource with properties
            resource = context.create().resource("/content/test",
                "title", "Test Title",
                "description", "Test Description"
    {% for prop in figma.properties %}
                ,"{{ prop.name }}", "{{ prop.test_value | default('test value') }}"
    {% endfor %}
            );
            
            context.request().setResource(resource);
            model = context.request().adaptTo({{ figma.component_name | pascalCase }}Model.class);
        }
    
        @Test
        void testGetTitle() {
            assertEquals("Test Title", model.getTitle());
        }
    
        @Test
        void testGetDescription() {
            assertEquals("Test Description", model.getDescription());
        }
    
    {% for prop in figma.properties %}
        @Test
        void testGet{{ prop.name | capitalize }}() {
            assertEquals("{{ prop.test_value | default('test value') }}", model.get{{ prop.name | capitalize }}());
        }
    
    {% endfor %}
        @Test
        void testGetExportedType() {
            assertEquals({{ figma.component_name | pascalCase }}Model.RESOURCE_TYPE, model.getExportedType());
        }
    
        @Test
        void testCssClasses() {
            String cssClasses = model.getCssClasses();
            assertNotNull(cssClasses);
            assertTrue(cssClasses.contains("cmp-{{ figma.component_name | kebabCase }}"));
        }
    
        @Test
        void testComponentWithEmptyProperties() {
            Resource emptyResource = context.create().resource("/content/empty");
            context.request().setResource(emptyResource);
            {{ figma.component_name | pascalCase }}Model emptyModel = context.request().adaptTo({{ figma.component_name | pascalCase }}Model.class);
            
            assertNotNull(emptyModel);
            assertEquals("", emptyModel.getTitle());
            assertEquals("", emptyModel.getDescription());
        }
    
        @Test
        void testActions() {
            // Create action resources
            context.create().resource(resource.getPath() + "/actions/action1",
                "text", "Action 1",
                "url", "/content/page1",
                "target", "_self"
            );
            
            context.create().resource(resource.getPath() + "/actions/action2",
                "text", "Action 2",
                "url", "/content/page2",
                "target", "_blank"
            );
            
            assertTrue(model.getHasActions());
            assertEquals(2, model.getActions().size());
            
            {{ figma.component_name | pascalCase }}Model.ActionItem firstAction = model.getActions().get(0);
            assertEquals("Action 1", firstAction.getText());
            assertEquals("/content/page1", firstAction.getUrl());
            assertEquals("_self", firstAction.getTarget());
        }
    }

# Documentation Templates  
documentation_template:
  component_readme: |
    # {{ figma.component_name }} AEM Component
    
    An AEM component for {{ figma.description | default('displaying content') }}.
    
    ## Overview
    
    The {{ figma.component_name }} component provides {{ figma.description | default('content display functionality') }} with full Touch UI authoring support and responsive design.
    
    ## Features
    
    - ✅ **Touch UI Authoring**: Full authoring dialog with content tabs
    - ✅ **Responsive Design**: Mobile-first CSS implementation
    - ✅ **Accessibility**: WCAG 2.1 AA compliant markup
    - ✅ **HTL Templates**: Secure, modern template language
    - ✅ **Sling Models**: Type-safe backend logic
    - ✅ **JSON Export**: Component content available via Sling Model Exporter
    - ✅ **Client Libraries**: Optimized CSS and JavaScript delivery
    
    ## Component Structure
    
    ```
    {{ figma.component_name | kebabCase }}/
    ├── {{ figma.component_name | kebabCase }}.html           # HTL template
    ├── _cq_dialog.xml                    # Touch UI authoring dialog
    ├── _cq_editConfig.xml               # Edit configuration
    ├── clientlibs/                      # Client libraries
    │   ├── css/
    │   │   └── {{ figma.component_name | kebabCase }}.scss  # Component styles
    │   └── js/
    │       └── {{ figma.component_name | kebabCase }}.js    # Component JavaScript
    └── {{ figma.component_name | pascalCase }}Model.java    # Sling Model
    ```
    
    ## Authoring
    
    The component provides a Touch UI dialog with the following tabs:
    
    ### Content Tab
    {% for prop in figma.properties %}
    - **{{ prop.label | default(prop.name | capitalize) }}**: {{ prop.description | default('Content field') }}
    {% endfor %}
    
    ### Actions Tab
    - **Actions**: Multi-field for adding action links
      - Text: Display text for the action
      - URL: Link destination
      - Target: Same window or new window
    
    ### Styling Tab
    - **CSS Classes**: Additional CSS classes for customization
    
    ## Properties
    
    | Property | Type | Description | Default |
    |----------|------|-------------|---------|
    | `title` | String | Component title | "" |
    | `description` | String | Component description | "" |
    {% for prop in figma.properties %}
    | `{{ prop.name }}` | {{ prop.java_type | default('String') }} | {{ prop.description | default('Property description') }} | {{ prop.default | default('""') }} |
    {% endfor %}
    | `actions` | Resource[] | Action items array | null |
    
    ## CSS Classes
    
    | Class | Description |
    |-------|-------------|
    | `.cmp-{{ figma.component_name | kebabCase }}` | Component root |
    | `.cmp-{{ figma.component_name | kebabCase }}__title` | Component title |
    | `.cmp-{{ figma.component_name | kebabCase }}__description` | Component description |
    | `.cmp-{{ figma.component_name | kebabCase }}__content` | Main content area |
    | `.cmp-{{ figma.component_name | kebabCase }}__actions` | Actions container |
    | `.cmp-{{ figma.component_name | kebabCase }}__action` | Individual action link |
    
    ## Usage Examples
    
    ### Basic Usage
    ```html
    <div data-sly-resource="${'path/to/component' @ resourceType='{{ project.name }}/components/{{ figma.component_name | kebabCase }}'}"></div>
    ```
    
    ### With Properties
    ```html
    <div data-sly-resource="${'.' @ resourceType='{{ project.name }}/components/{{ figma.component_name | kebabCase }}', wcmmode='disabled'}"></div>
    ```
    
    ## JSON Export
    
    The component supports JSON export via Sling Model Exporter:
    
    ```json
    {
      ":type": "{{ project.name }}/components/{{ figma.component_name | kebabCase }}",
      "title": "Component Title",
      "description": "Component Description",
    {% for prop in figma.properties %}
      "{{ prop.name }}": "{{ prop.example_value | default('example value') }}",
    {% endfor %}
      "actions": [
        {
          "text": "Action 1",
          "url": "/content/page1",
          "target": "_self"
        }
      ]
    }
    ```
    
    ## Customization
    
    ### CSS Customization
    Override component styles using CSS custom properties:
    
    ```scss
    .cmp-{{ figma.component_name | kebabCase }} {
    {% for token in design_tokens.colors %}
      --{{ token.name }}: {{ token.custom_value | default(token.value) }};
    {% endfor %}
    {% for token in design_tokens.spacing %}
      --{{ token.name }}: {{ token.custom_value | default(token.value + 'px') }};
    {% endfor %}
    }
    ```
    
    ### Dialog Customization
    Extend the component dialog by overlaying `_cq_dialog.xml`:
    
    ```
    /apps/{{ project.name }}/components/{{ figma.component_name | kebabCase }}/_cq_dialog.xml
    ```
    
    ## Browser Support
    
    - AEM 6.5+
    - AEM Cloud Service
    - Modern browsers (Chrome, Firefox, Safari, Edge)
    - IE 11 (with polyfills)
    
    ## Dependencies
    
    - AEM Core Components
    - HTL (HTML Template Language)
    - Sling Models API
    - Touch UI / Coral UI
    
    ## Testing
    
    Run unit tests:
    ```bash
    mvn test
    ```
    
    Run integration tests:
    ```bash
    mvn verify -Pintegration-tests
    ```
    
    ## Deployment
    
    The component is packaged as part of the project's content package:
    
    ```bash
    mvn clean install -PautoInstallPackage
    ```