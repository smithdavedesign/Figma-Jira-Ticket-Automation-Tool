meta:
  platform: jira
  document_type: service
  version: 1.0.0
  last_updated: 2025-10-30
  status: stable
  inherits_from: base.yml

# Template with base variable references
template:
  
  # Jira-specific overrides for service tasks
  title: "[{{ project.service_prefix | default('SVC') }}] {{ figma.component_name }} - Service Implementation"
  issue_type: Task
  priority: "{{ calculated.priority | default('Medium') }}"
  labels: ["service", "backend", "api", "{{ project.tech_stack.0 | lowercase }}"]
  
  # Content template for Jira service tasks
  content: |
    ## 🔧 Service Implementation Task
    
    Implement backend service or API endpoints for **{{ figma.component_name }}** functionality.
    
    **📋 Quick Details:**
    - **Service Type**: {{ figma.component_type | default('Backend Service') }}
    - **Tech Stack**: {{ project.tech_stack | join(', ') | default('Node.js, TypeScript') }}
    - **Priority**: {{ calculated.priority | default('Medium') }}
    - **Story Points**: {{ calculated.story_points | default('5') }}
    - **Status**: {{ figma.design_status | default('Ready for Implementation') }}
    
    ## 🎯 Service Requirements
    
    **🔗 Specification Reference**: [View Requirements]({{ figma.live_link }})
    **📸 API Flow Diagram**: {{ figma.screenshot_markdown.jira | default('!api-diagram.png|thumbnail!') }}
    
    {% if figma.extracted_colors %}
    **🎨 Related UI Context**:
    - **Frontend Colors**: {{ figma.extracted_colors }}
    {% endif %}
    
    ## ✅ Service Acceptance Criteria
    
    - [ ] **API Design**: RESTful endpoints following API standards
    - [ ] **Data Validation**: Input validation and sanitization
    - [ ] **Error Handling**: Proper HTTP status codes and error responses
    - [ ] **Authentication**: Secure authentication and authorization
    - [ ] **Performance**: Response times within SLA requirements
    - [ ] **Documentation**: API documentation (OpenAPI/Swagger)
    - [ ] **Testing**: Unit and integration tests
    - [ ] **Monitoring**: Logging and metrics collection
    
    ## 🔧 Technical Requirements
    
    **Service Stack:**
    {% for tech in project.tech_stack %}
    - {{ tech }}
    {% endfor %}
    
    **Service Structure:**
    ```
    services/{{ figma.component_name | kebabCase }}/
    ├── index.ts                      # Service exports
    ├── controller.ts                 # Request handlers
    ├── service.ts                    # Business logic
    ├── model.ts                      # Data models
    ├── validation.ts                 # Input validation
    ├── middleware.ts                 # Custom middleware
    ├── routes.ts                     # Route definitions
    ├── __tests__/                   # Test files
    └── types.ts                      # TypeScript definitions
    ```
    
    ## 📊 API Endpoints
    
    | Method | Endpoint | Description | Auth Required |
    |--------|----------|-------------|---------------|
    | GET    | `/api/{{ figma.component_name | kebabCase }}` | List items | Yes |
    | POST   | `/api/{{ figma.component_name | kebabCase }}` | Create item | Yes |
    | GET    | `/api/{{ figma.component_name | kebabCase }}/:id` | Get item | Yes |
    | PUT    | `/api/{{ figma.component_name | kebabCase }}/:id` | Update item | Yes |
    | DELETE | `/api/{{ figma.component_name | kebabCase }}/:id` | Delete item | Yes |
    
    {% if calculated.complexity == 'complex' %}
    ## ⚠️  Service Complexity
    
    **High Complexity Service** ({{ calculated.hours }} hours estimated)
    - **Confidence Level**: {{ calculated.confidence * 100 }}%
    {% if calculated.risk_factors %}
    - **Risk Factors**: {{ calculated.risk_factors | join(', ') }}
    {% endif %}
    {% if calculated.similar_components %}
    - **Similar Services**: {{ calculated.similar_components | join(', ') }}
    {% endif %}
    {% endif %}
    
    ## 📋 Implementation Tasks
    
    - [ ] **Setup**: Create service structure and configuration
    - [ ] **Models**: Define data models and schemas
    - [ ] **Validation**: Implement request validation
    - [ ] **Controllers**: Create request/response handlers
    - [ ] **Business Logic**: Implement core service functionality
    - [ ] **Database**: Set up data persistence layer
    - [ ] **Authentication**: Implement auth middleware
    - [ ] **Testing**: Unit and integration tests
    - [ ] **Documentation**: API documentation and examples
    - [ ] **Deployment**: Service deployment configuration
    
    ## 🧪 Testing Strategy
    
    - **Unit Tests**: Individual function testing
    - **Integration Tests**: API endpoint testing
    - **Load Tests**: Performance under stress
    - **Security Tests**: Authentication and authorization
    - **Contract Tests**: API contract validation
    
    ## 🔒 Security Considerations
    
    - Input validation and sanitization
    - Authentication and authorization
    - Rate limiting and throttling
    - Data encryption at rest and in transit
    - Audit logging for sensitive operations
    
    {% if authoring.notes != 'Authoring Notes Not Found' %}
    ## 📝 AEM Service Integration
    
    {{ authoring.notes }}
    
    **Technical Details:**
    - **Component Path**: {{ authoring.component_path }}
    - **CQ Template**: {{ authoring.cq_template }}
    - **Touch UI Required**: {{ authoring.touch_ui_required }}
    {% endif %}
    
    ## 🔗 Resources
    
    {% for resource in resources %}
    - **{{ resource.type }}**: [{{ resource.notes }}]({{ resource.link }})
    {% endfor %}
    
    ---
    
    **Generated**: {{ 'now' | date('%Y-%m-%d %H:%M') }} via Universal Template System  
    **Template**: jira/service.yml → base.yml  
    **Confidence**: {{ calculated.confidence * 100 }}% | **Estimated Hours**: {{ calculated.hours }}