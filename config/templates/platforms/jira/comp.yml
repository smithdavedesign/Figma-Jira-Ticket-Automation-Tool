meta:
  platform: jira
  document_type: component
  version: 1.0.0
  last_updated: 2025-10-30
  status: stable
  inherits_from: base.yml

# Template with base variable references
template:
  
  # Jira-specific overrides
  title: "[{{ project.component_prefix | default('UI') }}] {{ figma.component_name }} Component"
  issue_type: Task
  priority: "{{ calculated.priority | default('Medium') }}"
  labels: ["component", "ui", "{{ project.tech_stack.0 | lowercase }}"]
  
  # Content template for Jira tickets
  content: |
    ## 🎯 Component Overview
    
    Implement the **{{ figma.component_name }}** component from the design specifications.
    
    **📋 Quick Details:**
    - **Component Type**: {{ figma.component_type | default('UI Component') }}
    - **Tech Stack**: {{ project.tech_stack | join(', ') | default('React, TypeScript') }}
    - **Priority**: {{ calculated.priority | default('Medium') }}
    - **Story Points**: {{ calculated.story_points | default('5') }}
    - **Design Status**: {{ figma.design_status | default('Ready for Development') }}
    
    ## 🎨 Design References
    
    **🔗 Figma Design**: [View Component]({{ figma.live_link }})
    **📸 Screenshot**: {{ figma.screenshot_markdown.jira | default('!screenshot.png|thumbnail!') }}
    
    {% if figma.extracted_colors %}
    **🎨 Design Tokens**:
    - **Colors**: {{ figma.extracted_colors }}
    {% endif %}
    {% if figma.extracted_typography %}
    - **Typography**: {{ figma.extracted_typography }}
    {% endif %}
    
    ## ✅ Acceptance Criteria
    
    - [ ] **Visual Accuracy**: Component matches design specifications exactly
    - [ ] **Responsive Design**: Works across all supported breakpoints (mobile, tablet, desktop)
    - [ ] **Accessibility**: Meets WCAG 2.1 AA standards with proper ARIA labels
    - [ ] **Design System Compliance**: Uses approved design tokens and follows naming conventions
    - [ ] **Testing**: Unit tests with {{ project.testing_framework | default('Jest + RTL') }}
    - [ ] **Performance**: Component renders efficiently with no unnecessary re-renders
    - [ ] **Documentation**: Component documented in Storybook with all variants
    
    ## 🔧 Technical Requirements
    
    **Implementation Stack:**
    {% for tech in project.tech_stack %}
    - {{ tech }}
    {% endfor %}
    
    **Component Structure:**
    ```
    {{ figma.component_name }}/
    ├── {{ figma.component_name }}.tsx          # Main component
    ├── {{ figma.component_name }}.module.css   # Component styles
    ├── {{ figma.component_name }}.test.tsx     # Unit tests
    ├── {{ figma.component_name }}.stories.tsx  # Storybook stories
    ├── types.ts                                # TypeScript interfaces
    └── index.ts                                # Export file
    ```
    
    {% if calculated.complexity == 'complex' %}
    ## ⚠️  Complexity Analysis
    
    **High Complexity Component** ({{ calculated.hours }} hours estimated)
    - **Confidence Level**: {{ calculated.confidence * 100 }}%
    {% if calculated.risk_factors %}
    - **Risk Factors**: {{ calculated.risk_factors | join(', ') }}
    {% endif %}
    {% if calculated.similar_components %}
    - **Similar Components**: {{ calculated.similar_components | join(', ') }}
    {% endif %}
    {% endif %}
    
    ## 📋 Implementation Tasks
    
    - [ ] **Setup**: Create component file structure
    - [ ] **Types**: Define TypeScript interfaces and prop types
    - [ ] **Styling**: Implement CSS with design tokens
    - [ ] **Logic**: Add component behavior and state management
    - [ ] **Testing**: Write comprehensive unit tests
    - [ ] **Stories**: Create Storybook documentation
    - [ ] **Review**: Code review and accessibility audit
    
    {% if authoring.notes != 'Authoring Notes Not Found' %}
    ## 📝 AEM Authoring Notes
    
    {{ authoring.notes }}
    
    **Technical Details:**
    - **Component Path**: {{ authoring.component_path }}
    - **CQ Template**: {{ authoring.cq_template }}
    - **Touch UI Required**: {{ authoring.touch_ui_required }}
    {% endif %}
    
    ## 🔗 Resources
    
    {% for resource in resources %}
    - **{{ resource.type }}**: [{{ resource.notes }}]({{ resource.link }})
    {% endfor %}
    
    ---
    
    **Generated**: {{ 'now' | date('%Y-%m-%d %H:%M') }} via Universal Template System  
    **Template**: jira/component.yml → base.yml  
    **Confidence**: {{ calculated.confidence * 100 }}% | **Estimated Hours**: {{ calculated.hours }}
