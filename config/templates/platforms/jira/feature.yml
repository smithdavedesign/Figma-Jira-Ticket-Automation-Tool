meta:
  platform: jira
  document_type: feature
  version: 1.0.0
  last_updated: 2025-10-30
  status: stable
  inherits_from: base.yml

# Template with base variable references
template:
  
  # Jira-specific overrides for features
  title: "[{{ project.feature_prefix | default('FEAT') }}] {{ figma.component_name }} Feature Implementation"
  issue_type: Story
  priority: "{{ calculated.priority | default('Medium') }}"
  labels: ["feature", "enhancement", "{{ project.tech_stack.0 | lowercase }}"]
  
  # Content template for Jira feature tickets
  content: |
    ## 🚀 Feature Overview
    
    Implement the **{{ figma.component_name }}** feature based on design specifications and user requirements.
    
    **📋 Quick Details:**
    - **Feature Type**: {{ figma.component_type | default('User Feature') }}
    - **Tech Stack**: {{ project.tech_stack | join(', ') | default('React, TypeScript') }}
    - **Priority**: {{ calculated.priority | default('Medium') }}
    - **Story Points**: {{ calculated.story_points | default('8') }}
    - **Design Status**: {{ figma.design_status | default('Ready for Development') }}
    
    ## 🎨 Design References
    
    **🔗 Figma Design**: [View Feature Flow]({{ figma.live_link }})
    **📸 Screenshot**: {{ figma.screenshot_markdown.jira | default('!screenshot.png|thumbnail!') }}
    
    {% if figma.extracted_colors %}
    **🎨 Design Tokens**:
    - **Colors**: {{ figma.extracted_colors }}
    {% endif %}
    {% if figma.extracted_typography %}
    - **Typography**: {{ figma.extracted_typography }}
    {% endif %}
    
    ## 💡 User Story
    
    **As a** [user type]  
    **I want** to use the {{ figma.component_name }} feature  
    **So that** I can [achieve specific goal]
    
    ## ✅ Acceptance Criteria
    
    - [ ] **Functional Requirements**: All feature functionality works as designed
    - [ ] **User Experience**: Intuitive and matches design specifications
    - [ ] **Responsive Design**: Works across all supported breakpoints
    - [ ] **Accessibility**: Meets WCAG 2.1 AA standards
    - [ ] **Performance**: Feature loads and responds within acceptable timeframes
    - [ ] **Error Handling**: Graceful error states and user feedback
    - [ ] **Integration**: Works seamlessly with existing features
    - [ ] **Testing**: End-to-end tests cover all user journeys
    
    ## 🔧 Technical Requirements
    
    **Implementation Stack:**
    {% for tech in project.tech_stack %}
    - {{ tech }}
    {% endfor %}
    
    **Feature Structure:**
    ```
    {{ figma.component_name }}/
    ├── components/                    # Feature components
    ├── hooks/                        # Custom React hooks
    ├── services/                     # API services
    ├── utils/                        # Utility functions
    ├── types/                        # TypeScript definitions
    ├── __tests__/                    # Test files
    └── index.ts                      # Feature exports
    ```
    
    {% if calculated.complexity == 'complex' %}
    ## ⚠️  Complexity Analysis
    
    **High Complexity Feature** ({{ calculated.hours }} hours estimated)
    - **Confidence Level**: {{ calculated.confidence * 100 }}%
    {% if calculated.risk_factors %}
    - **Risk Factors**: {{ calculated.risk_factors | join(', ') }}
    {% endif %}
    {% if calculated.similar_components %}
    - **Similar Features**: {{ calculated.similar_components | join(', ') }}
    {% endif %}
    {% endif %}
    
    ## 📋 Implementation Tasks
    
    - [ ] **Analysis**: Break down feature into components and services
    - [ ] **API Design**: Define data models and service interfaces
    - [ ] **Components**: Create reusable UI components
    - [ ] **State Management**: Implement feature state logic
    - [ ] **Integration**: Connect with backend services and APIs
    - [ ] **Testing**: Unit, integration, and E2E tests
    - [ ] **Documentation**: Update feature documentation
    - [ ] **Review**: Code review and QA testing
    
    {% if authoring.notes != 'Authoring Notes Not Found' %}
    ## 📝 AEM Authoring Notes
    
    {{ authoring.notes }}
    
    **Technical Details:**
    - **Component Path**: {{ authoring.component_path }}
    - **CQ Template**: {{ authoring.cq_template }}
    - **Touch UI Required**: {{ authoring.touch_ui_required }}
    {% endif %}
    
    ## 🔗 Resources
    
    {% for resource in resources %}
    - **{{ resource.type }}**: [{{ resource.notes }}]({{ resource.link }})
    {% endfor %}
    
    ---
    
    **Generated**: {{ 'now' | date('%Y-%m-%d %H:%M') }} via Universal Template System  
    **Template**: jira/feature.yml → base.yml  
    **Confidence**: {{ calculated.confidence * 100 }}% | **Estimated Hours**: {{ calculated.hours }}