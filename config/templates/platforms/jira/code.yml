meta:
  platform: jira
  document_type: code
  version: 1.0.0
  last_updated: 2025-10-30
  status: stable
  inherits_from: base.yml

# Template with base variable references
template:
  
  # Jira-specific overrides for code tasks
  title: "[{{ project.code_prefix | default('CODE') }}] {{ figma.component_name }} - Implementation Task"
  issue_type: Task
  priority: "{{ calculated.priority | default('Medium') }}"
  labels: ["code", "implementation", "{{ project.tech_stack.0 | lowercase }}"]
  
  # Content template for Jira code tasks
  content: |
    ## ⚙️ Code Implementation Task
    
    Implement code for **{{ figma.component_name }}** based on technical specifications.
    
    **📋 Quick Details:**
    - **Implementation Type**: {{ figma.component_type | default('Code Implementation') }}
    - **Tech Stack**: {{ project.tech_stack | join(', ') | default('React, TypeScript') }}
    - **Priority**: {{ calculated.priority | default('Medium') }}
    - **Story Points**: {{ calculated.story_points | default('3') }}
    - **Status**: {{ figma.design_status | default('Ready for Implementation') }}
    
    ## 🎯 Implementation Scope
    
    **🔗 Design Reference**: [View Specifications]({{ figma.live_link }})
    **📸 Visual Reference**: {{ figma.screenshot_markdown.jira | default('!screenshot.png|thumbnail!') }}
    
    {% if figma.extracted_colors %}
    **🎨 Design Tokens Required**:
    - **Colors**: {{ figma.extracted_colors }}
    {% endif %}
    {% if figma.extracted_typography %}
    - **Typography**: {{ figma.extracted_typography }}
    {% endif %}
    
    ## ✅ Technical Acceptance Criteria
    
    - [ ] **Code Quality**: Follows established coding standards and conventions
    - [ ] **Type Safety**: Full TypeScript coverage with proper types
    - [ ] **Performance**: Optimized code with no performance regressions
    - [ ] **Error Handling**: Proper error boundaries and fallback states
    - [ ] **Testing**: Unit tests with >80% coverage
    - [ ] **Documentation**: Code comments and technical documentation
    - [ ] **Security**: Follows security best practices
    - [ ] **Accessibility**: ARIA labels and keyboard navigation support
    
    ## 🔧 Technical Requirements
    
    **Development Stack:**
    {% for tech in project.tech_stack %}
    - {{ tech }}
    {% endfor %}
    
    **Code Structure:**
    ```
    src/{{ figma.component_name | kebabCase }}/
    ├── index.ts                      # Main exports
    ├── {{ figma.component_name }}.tsx # Component implementation
    ├── {{ figma.component_name }}.styles.ts # Styled components
    ├── {{ figma.component_name }}.test.tsx  # Unit tests
    ├── hooks/                        # Custom hooks (if needed)
    ├── utils/                        # Utility functions
    └── types.ts                      # TypeScript definitions
    ```
    
    {% if calculated.complexity == 'complex' %}
    ## ⚠️  Implementation Complexity
    
    **High Complexity Implementation** ({{ calculated.hours }} hours estimated)
    - **Confidence Level**: {{ calculated.confidence * 100 }}%
    {% if calculated.risk_factors %}
    - **Risk Factors**: {{ calculated.risk_factors | join(', ') }}
    {% endif %}
    {% if calculated.similar_components %}
    - **Reference Implementations**: {{ calculated.similar_components | join(', ') }}
    {% endif %}
    {% endif %}
    
    ## 📋 Implementation Checklist
    
    - [ ] **Setup**: Create file structure and boilerplate
    - [ ] **Types**: Define interfaces and type definitions
    - [ ] **Core Logic**: Implement main functionality
    - [ ] **Styling**: Apply styles using design tokens
    - [ ] **Hooks**: Create custom hooks for state management
    - [ ] **Utils**: Add utility functions and helpers
    - [ ] **Tests**: Write comprehensive unit tests
    - [ ] **Lint/Format**: Run linters and formatters
    - [ ] **Review**: Self-review and peer code review
    
    ## 🧪 Testing Strategy
    
    - **Unit Tests**: Component behavior and edge cases
    - **Integration Tests**: Component interactions
    - **Accessibility Tests**: Screen reader and keyboard navigation
    - **Visual Regression**: Automated screenshot comparisons
    
    {% if authoring.notes != 'Authoring Notes Not Found' %}
    ## 📝 AEM Implementation Notes
    
    {{ authoring.notes }}
    
    **Technical Details:**
    - **Component Path**: {{ authoring.component_path }}
    - **CQ Template**: {{ authoring.cq_template }}
    - **Touch UI Required**: {{ authoring.touch_ui_required }}
    {% endif %}
    
    ## 🔗 Resources
    
    {% for resource in resources %}
    - **{{ resource.type }}**: [{{ resource.notes }}]({{ resource.link }})
    {% endfor %}
    
    ---
    
    **Generated**: {{ 'now' | date('%Y-%m-%d %H:%M') }} via Universal Template System  
    **Template**: jira/code.yml → base.yml  
    **Confidence**: {{ calculated.confidence * 100 }}% | **Estimated Hours**: {{ calculated.hours }}