meta:
  platform: wiki
  document_type: wiki
  version: 1.0.0
  last_updated: 2025-10-30
  status: stable
  inherits_from: base.yml

template:
  title: "{{ figma.component_name }} Wiki Page"
  document_type: "Knowledge Base"
  tags: ["wiki", "documentation", "knowledge-base", "{{ project.tech_stack.0 | lowercase }}"]
  
  content: |
    # {{ figma.component_name }}
    
    > **Type**: {{ figma.component_type | default('Component/Feature') }}  
    > **Status**: {{ figma.design_status | default('Active') }}  
    > **Last Updated**: {{ 'now' | date('%Y-%m-%d') }}
    
    ## Quick Navigation
    - [Overview](#overview)
    - [Getting Started](#getting-started)
    - [Examples](#examples)
    - [API Reference](#api-reference)
    - [Troubleshooting](#troubleshooting)
    - [Resources](#resources)
    
    ## Overview
    
    The **{{ figma.component_name }}** is [brief description of what this component/feature does and why it's useful].
    
    ![Overview]({{ figma.screenshot_filename | default('overview.png') }})
    
    ### Key Features
    - ‚úÖ Feature 1: Description
    - ‚úÖ Feature 2: Description  
    - ‚úÖ Feature 3: Description
    
    ### When to Use
    Use the {{ figma.component_name }} when you need to:
    - [Use case 1]
    - [Use case 2]
    - [Use case 3]
    
    ## Getting Started
    
    ### Prerequisites
    Before using {{ figma.component_name }}, ensure you have:
    - Required dependency 1
    - Required dependency 2
    - Proper permissions/access
    
    ### Quick Start
    ```bash
    # Installation
    npm install @{{ project.name }}/{{ figma.component_name | kebabCase }}
    
    # Basic setup
    import { {{ figma.component_name }} } from '@{{ project.name }}/{{ figma.component_name | kebabCase }}';
    ```
    
    ### Basic Example
    ```tsx
    function App() {
      return (
        <{{ figma.component_name }}
          // Basic props
        />
      );
    }
    ```
    
    ## Examples
    
    ### Example 1: Basic Usage
    ```tsx
    <{{ figma.component_name }}
      variant="default"
      size="medium"
    />
    ```
    
    ### Example 2: Advanced Configuration
    ```tsx
    <{{ figma.component_name }}
      variant="primary"
      size="large"
      customProps={{
        // advanced configuration
      }}
    />
    ```
    
    ### Example 3: Integration with Other Components
    ```tsx
    <Container>
      <Header />
      <{{ figma.component_name }}
        // integrated usage
      />
      <Footer />
    </Container>
    ```
    
    ## Configuration
    
    ### Available Props
    | Prop | Type | Default | Description |
    |------|------|---------|-------------|
    | `variant` | `string` | `'default'` | Visual style variant |
    | `size` | `'small' \| 'medium' \| 'large'` | `'medium'` | Component size |
    | `disabled` | `boolean` | `false` | Disable interactions |
    
    ### Advanced Configuration
    ```tsx
    const config = {
      theme: 'light',
      locale: 'en-US',
      features: {
        feature1: true,
        feature2: false
      }
    };
    ```
    
    ## API Reference
    
    ### Methods
    | Method | Parameters | Returns | Description |
    |--------|------------|---------|-------------|
    | `initialize()` | `config: Config` | `void` | Initialize component |
    | `update()` | `data: Data` | `Promise<void>` | Update component state |
    | `destroy()` | - | `void` | Clean up component |
    
    ### Events
    | Event | Payload | Description |
    |-------|---------|-------------|
    | `onChange` | `value: any` | Fired when value changes |
    | `onError` | `error: Error` | Fired when error occurs |
    
    ## Best Practices
    
    ### Do's ‚úÖ
    - Follow naming conventions
    - Use proper TypeScript types
    - Include proper error handling
    - Test thoroughly
    
    ### Don'ts ‚ùå
    - Don't bypass validation
    - Don't ignore accessibility
    - Don't skip documentation
    - Don't use deprecated APIs
    
    ## Troubleshooting
    
    ### Common Issues
    
    **Problem**: Component not rendering  
    **Solution**: Check that all required props are provided
    
    **Problem**: Styling issues  
    **Solution**: Verify CSS imports and theme configuration
    
    **Problem**: TypeScript errors  
    **Solution**: Update type definitions and check prop types
    
    ### Getting Help
    - üìñ [Documentation]({{ wiki_url }})
    - üí¨ [Community Forum]({{ project.community_url }})
    - üêõ [Report Issues]({{ github_url }}/issues)
    
    ## Changelog
    
    ### Version 1.0.0
    - ‚ú® Initial release
    - ‚úÖ Core functionality implemented
    - üìö Documentation added
    
    ## Related Pages
    
    - [Component Library](../components/README.md)
    - [Design System](../design-system/README.md)
    - [API Documentation](../api/README.md)
    
    {% if authoring.notes != 'Authoring Notes Not Found' %}
    ## AEM Integration
    
    {{ authoring.notes }}
    
    **AEM Details:**
    - **Path**: {{ authoring.component_path }}
    - **Template**: {{ authoring.cq_template }}
    - **Touch UI**: {{ authoring.touch_ui_required }}
    {% endif %}
    
    ## Resources
    
    {% for resource in resources %}
    - [{{ resource.type }}]({{ resource.link }}) - {{ resource.notes }}
    {% endfor %}
    
    ## Contributors
    
    - [Developer Name](mailto:dev@company.com)
    - [Designer Name](mailto:design@company.com)
    
    ---
    
    **Last Updated**: {{ 'now' | date('%Y-%m-%d %H:%M') }}  
    **Generated via**: Universal Template System (wiki/wiki.yml ‚Üí base.yml)