meta:
  platform: confluence
  document_type: service
  version: 1.0.0
  last_updated: 2025-10-30
  status: stable
  inherits_from: base.yml

template:
  title: "{{ figma.component_name }} Service Documentation"
  document_type: "API Guide"
  tags: ["service", "api", "backend", "{{ project.tech_stack.0 | lowercase }}"]
  
  content: |
    # {{ figma.component_name }} Service API
    
    > **Service Type**: {{ figma.component_type | default('Backend Service') }}  
    > **Tech Stack**: {{ project.tech_stack | join(', ') | default('Node.js, TypeScript') }}  
    > **Status**: {{ figma.design_status | default('Ready for Implementation') }}
    
    ## Service Overview
    
    The **{{ figma.component_name }}** service provides backend functionality and API endpoints for [service description].
    
    ## API Endpoints
    
    ### Base URL
    ```
    https://api.{{ project.name | kebabCase }}.com/v1
    ```
    
    ### Authentication
    All API requests require authentication via Bearer token:
    ```bash
    Authorization: Bearer <your-api-token>
    ```
    
    ### Endpoints
    
    | Method | Endpoint | Description | Auth Required |
    |--------|----------|-------------|---------------|
    | GET    | `/{{ figma.component_name | kebabCase }}` | List items | Yes |
    | POST   | `/{{ figma.component_name | kebabCase }}` | Create item | Yes |
    | GET    | `/{{ figma.component_name | kebabCase }}/:id` | Get item | Yes |
    | PUT    | `/{{ figma.component_name | kebabCase }}/:id` | Update item | Yes |
    | DELETE | `/{{ figma.component_name | kebabCase }}/:id` | Delete item | Yes |
    
    ## Request/Response Examples
    
    ### GET /{{ figma.component_name | kebabCase }}
    ```bash
    curl -X GET \
      https://api.{{ project.name | kebabCase }}.com/v1/{{ figma.component_name | kebabCase }} \
      -H 'Authorization: Bearer <token>'
    ```
    
    **Response:**
    ```json
    {
      "data": [
        {
          "id": "123",
          "name": "{{ figma.component_name }}",
          "status": "active",
          "created_at": "2025-10-30T12:00:00Z"
        }
      ],
      "pagination": {
        "page": 1,
        "per_page": 20,
        "total": 1
      }
    }
    ```
    
    ### POST /{{ figma.component_name | kebabCase }}
    ```bash
    curl -X POST \
      https://api.{{ project.name | kebabCase }}.com/v1/{{ figma.component_name | kebabCase }} \
      -H 'Authorization: Bearer <token>' \
      -H 'Content-Type: application/json' \
      -d '{
        "name": "New {{ figma.component_name }}",
        "description": "Description here"
      }'
    ```
    
    ## Data Models
    
    ### {{ figma.component_name }} Model
    ```typescript
    interface {{ figma.component_name }} {
      id: string;
      name: string;
      description?: string;
      status: 'active' | 'inactive';
      created_at: string;
      updated_at: string;
    }
    ```
    
    ## Error Handling
    
    ### HTTP Status Codes
    | Code | Description |
    |------|-------------|
    | 200 | Success |
    | 201 | Created |
    | 400 | Bad Request |
    | 401 | Unauthorized |
    | 403 | Forbidden |
    | 404 | Not Found |
    | 500 | Internal Server Error |
    
    ### Error Response Format
    ```json
    {
      "error": {
        "code": "VALIDATION_ERROR",
        "message": "Invalid input data",
        "details": [
          {
            "field": "name",
            "message": "Name is required"
          }
        ]
      }
    }
    ```
    
    ## Rate Limiting
    
    - **Rate Limit**: 100 requests per minute per API key
    - **Headers**: `X-RateLimit-Limit`, `X-RateLimit-Remaining`, `X-RateLimit-Reset`
    
    ## SDKs and Libraries
    
    ### JavaScript/TypeScript
    ```bash
    npm install @{{ project.name }}/{{ figma.component_name | kebabCase }}-client
    ```
    
    ```typescript
    import { {{ figma.component_name }}Client } from '@{{ project.name }}/{{ figma.component_name | kebabCase }}-client';
    
    const client = new {{ figma.component_name }}Client({
      apiKey: 'your-api-key'
    });
    
    const items = await client.list();
    ```
    
    ## Resources
    
    {% for resource in resources %}
    - [{{ resource.type }}]({{ resource.link }}) - {{ resource.notes }}
    {% endfor %}
    
    ---
    **Generated**: {{ 'now' | date('%Y-%m-%d %H:%M') }} via Universal Template System