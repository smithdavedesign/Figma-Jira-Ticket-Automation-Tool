template_id: "linear_feature_component"
version: "2.0.0"
organization: "default"
platform: "linear"
description: "Linear feature ticket template with structured format for component development"

variables:
  component_name: "{{ figma.component_name }}"
  team: "{{ project.team }}"
  priority: "{{ calculated.priority }}"
  estimate: "{{ calculated.story_points }}"
  labels: "{{ project.labels }}"
  cycle: "{{ project.cycle }}"

team_standards:
  testing_framework: "jest-rtl"
  accessibility_level: "wcag-aa"
  documentation_format: "markdown"
  code_style: "prettier"
  review_process: "standard"

output_format:
  ticket_type: "Feature"
  sections: ["header", "overview", "requirements", "implementation", "testing", "acceptance"]
  formatting:
    use_emojis: true
    include_diagrams: false
    code_highlighting: true
    table_formatting: false
    link_formatting: true
  ai_context_markers: false
  include_metadata: true

customization:
  include_ai_context_markers: false
  generate_test_files: true
  create_storybook_stories: true
  add_accessibility_checklist: true
  include_performance_metrics: false
  enable_automated_testing: true
  include_design_tokens: true
  add_similar_components: false
  include_risk_assessment: false

# Linear feature template content
content: |
  # 🧩 {{ component_name }} Component

  **Team:** {{ team }}  
  **Priority:** {{ priority }}  
  **Estimate:** {{ estimate }} points  
  **Labels:** {{ labels }}  
  **Cycle:** {{ cycle }}

  ---

  ## 📝 Overview
  Build the {{ component_name }} component to provide consistent user interface elements across our application, following design system standards and accessibility best practices.

  **Design Reference:** [Figma Component]({{ figma.live_link }})

  ---

  ## 📋 Requirements
  - Implement component with all specified visual states
  - Ensure full keyboard accessibility and screen reader support
  - Follow TypeScript best practices with proper interfaces
  - Integrate with existing design system tokens
  - Include comprehensive unit test coverage
  - Create Storybook documentation with usage examples

  ---

  ## 🔧 Implementation
  **Tech Stack:** {{ project.tech_stack }}
  **Framework:** {{ team_standards.testing_framework }}

  **Key Implementation Points:**
  - Use semantic HTML elements for accessibility
  - Implement all interaction states (hover, focus, active, disabled)
  - Apply consistent design tokens for theming
  - Ensure responsive behavior across breakpoints
  - Add proper TypeScript type definitions

  ```typescript
  interface {{ component_name }}Props {
    variant?: 'primary' | 'secondary' | 'danger';
    size?: 'small' | 'medium' | 'large';
    disabled?: boolean;
    onClick?: (event: MouseEvent) => void;
    children: ReactNode;
  }
  ```

  ---

  ## 🧪 Testing
  **Coverage Requirements:** 90%+ code coverage

  **Test Categories:**
  - Component rendering with different props
  - Event handling and user interactions
  - Accessibility compliance (ARIA, keyboard navigation)
  - Visual states and responsive behavior
  - Integration with design system

  **Testing Tools:**
  - {{ team_standards.testing_framework }}
  - jest-axe for accessibility testing
  - React Testing Library for interaction testing

  ---

  ## ✅ Acceptance Criteria
  - [ ] Component matches Figma design specifications exactly
  - [ ] All interactive states work correctly (hover, focus, disabled)
  - [ ] Component passes accessibility audit (WCAG 2.1 AA)
  - [ ] TypeScript interfaces are properly defined and exported
  - [ ] Unit tests achieve 90%+ code coverage
  - [ ] Storybook stories demonstrate all component variants
  - [ ] Component integrates seamlessly with design system
  - [ ] Documentation includes usage examples and best practices
  - [ ] Code review approved by team lead
  - [ ] QA testing completed across target browsers

  ---

  ## 🔗 Related Work
  - Design System Documentation: {{ project.design_system_url }}
  - Component Library: {{ project.component_library_url }}  
  - Accessibility Guidelines: {{ project.accessibility_url }}
  - Testing Standards: {{ project.testing_standards_url }}