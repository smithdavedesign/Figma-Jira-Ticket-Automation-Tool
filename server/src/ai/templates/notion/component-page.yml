template_id: "notion_component_page"
version: "2.0.0"
organization: "default"
platform: "notion"
description: "Notion page template for component documentation and project briefs"

variables:
  component_name: "{{ figma.component_name }}"
  author: "{{ user.name }}"
  date: "{{ project.current_date }}"
  status: "{{ project.status }}"
  project_brief: "{{ project.brief }}"

team_standards:
  testing_framework: "jest-rtl"
  accessibility_level: "wcag-aa"
  documentation_format: "notion"
  code_style: "prettier"
  review_process: "design-review"

output_format:
  ticket_type: "Page"
  sections: ["header", "project_brief", "specifications", "implementation", "resources", "timeline"]
  formatting:
    use_emojis: true
    include_diagrams: true
    code_highlighting: true
    table_formatting: true
    link_formatting: true
  ai_context_markers: false
  include_metadata: true

customization:
  include_ai_context_markers: false
  generate_test_files: false
  create_storybook_stories: false
  add_accessibility_checklist: true
  include_performance_metrics: true
  enable_automated_testing: false
  include_design_tokens: true
  add_similar_components: false
  include_risk_assessment: false

# Notion page template content
content: |
  # üß© {{ component_name }} Component

  **Author:** {{ author }}  
  **Created:** {{ date }}  
  **Status:** {{ status }}  
  **Last Updated:** {{ date }}

  ---

  ## üìã Project Brief
  {{ project_brief }}

  This component is part of our design system enhancement initiative to provide consistent, accessible UI components that improve user experience and developer productivity.

  **Key Objectives:**
  - Create reusable {{ component_name }} component
  - Ensure accessibility compliance ({{ team_standards.accessibility_level }})
  - Integrate with existing design system
  - Provide comprehensive documentation

  ---

  ## üé® Design Specifications

  ### Visual Design
  **Figma Reference:** [{{ component_name }} Component]({{ figma.live_link }})  
  **üì∏ Design Screenshot:** ![{{ component_name }} Design]({{ figma.screenshot_filename }})

  **Design Tokens:**
  | Property | Token | Value |
  | --- | --- | --- |
  | Primary Color | `color-primary` | {{ figma.design_tokens.colors.primary }} |
  | Text Color | `color-text` | {{ figma.design_tokens.colors.text }} |
  | Border Radius | `radius-md` | {{ figma.design_tokens.borders.radius_md }} |
  | Spacing | `spacing-md` | {{ figma.design_tokens.spacing.md }} |

  ### Component Variants
  - **Primary:** Main call-to-action style
  - **Secondary:** Supporting action style  
  - **Danger:** Destructive action style

  ### Interactive States
  - **Default:** Base component appearance
  - **Hover:** Enhanced visual feedback
  - **Focus:** Keyboard navigation indicator
  - **Active:** Pressed/activated state
  - **Disabled:** Non-interactive state

  ---

  ## üîß Implementation Details

  ### Technical Requirements
  - **Framework:** {{ project.tech_stack }}
  - **Testing:** {{ team_standards.testing_framework }}
  - **Styling:** Design system tokens + styled-components
  - **Accessibility:** WCAG 2.1 AA compliance

  ### File Structure
  ```
  src/components/{{ component_name }}/
  ‚îú‚îÄ‚îÄ index.ts                     // Public exports
  ‚îú‚îÄ‚îÄ {{ component_name }}.tsx     // Main component
  ‚îú‚îÄ‚îÄ {{ component_name }}.types.ts // TypeScript interfaces
  ‚îú‚îÄ‚îÄ {{ component_name }}.styles.ts // Styled components
  ‚îú‚îÄ‚îÄ {{ component_name }}.test.tsx // Unit tests
  ‚îî‚îÄ‚îÄ {{ component_name }}.stories.tsx // Storybook stories
  ```

  ### API Interface
  ```typescript
  interface {{ component_name }}Props {
    variant?: 'primary' | 'secondary' | 'danger';
    size?: 'small' | 'medium' | 'large';
    disabled?: boolean;
    loading?: boolean;
    onClick?: (event: MouseEvent<HTMLButtonElement>) => void;
    children: ReactNode;
    className?: string;
    'data-testid'?: string;
  }
  ```

  ---

  ## üìö Resources

  ### Documentation
  - [Design System Guidelines]({{ project.design_system_url }})
  - [Component Development Standards]({{ project.development_standards_url }})
  - [Accessibility Testing Guide]({{ project.accessibility_testing_url }})
  - [Storybook Documentation]({{ project.storybook_url }})

  ### Tools & Libraries
  - React + TypeScript
  - Styled Components
  - {{ team_standards.testing_framework }}
  - Storybook
  - Jest + React Testing Library

  ---

  ## üìÖ Timeline & Milestones

  | Phase | Task | Owner | Due Date | Status |
  | --- | --- | --- | --- | --- |
  | **Design** | Component specification review | {{ project.designer }} | {{ project.design_due }} | ‚úÖ Complete |
  | **Development** | Component implementation | {{ project.developer }} | {{ project.dev_due }} | üîÑ In Progress |
  | **Testing** | Unit tests & accessibility audit | {{ project.qa_lead }} | {{ project.testing_due }} | ‚è≥ Pending |
  | **Documentation** | Storybook stories & usage guide | {{ project.tech_writer }} | {{ project.docs_due }} | ‚è≥ Pending |
  | **Review** | Code review & design QA | {{ project.tech_lead }} | {{ project.review_due }} | ‚è≥ Pending |

  ---

  ## ‚úÖ Success Criteria

  ### Functional Requirements
  - [ ] Component renders correctly with all prop combinations
  - [ ] All interactive states work as designed
  - [ ] Component integrates with existing design system
  - [ ] TypeScript interfaces are complete and accurate

  ### Quality Requirements
  - [ ] 90%+ unit test coverage
  - [ ] 100% accessibility score (axe-core)
  - [ ] Zero TypeScript errors or warnings
  - [ ] Performance budget under 5KB gzipped

  ### Documentation Requirements
  - [ ] Storybook stories for all variants and states
  - [ ] Usage examples and best practices documented
  - [ ] API reference with all props documented
  - [ ] Migration guide (if replacing existing component)

  ---

  ## üîó Related Pages
  - [Design System Overview]({{ project.design_system_overview }})
  - [Component Library Roadmap]({{ project.component_roadmap }})
  - [Accessibility Standards]({{ project.accessibility_standards }})
  - [Development Workflow]({{ project.development_workflow }})