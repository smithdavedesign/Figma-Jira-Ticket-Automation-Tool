/**
 * Ticket Generator Tool
 *
 * Generates development tickets from Figma designs with AI enhancement
 * and template-based customization.
 */

import { Logger } from '../utils/logger.js';
import { ErrorHandler } from '../utils/error-handler.js';

export class TicketGenerator {
  constructor() {
    this.logger = new Logger('TicketGenerator');
    this.errorHandler = new ErrorHandler();
  }

  /**
   * Execute ticket generation
   * @param {Object} args - Generation arguments
   * @returns {Object} Generated ticket content
   */
  async execute(args) {
    const startTime = performance.now();

    try {
      const {
        frameData = [],
        template = 'component',
        projectName = 'Design Implementation',
        figmaContext = {},
        instructions = '',
        platform = 'jira',
        documentType = 'component',
        organizationId = 'default',
        teamStandards = {},
        useTemplates = true,
        techStack = 'react'
      } = args;

      this.logger.info('🎫 Generating tickets', {
        frames: frameData.length,
        platform,
        documentType,
        useTemplates
      });

      // Handle empty frame data
      if (!frameData || frameData.length === 0) {
        return {
          content: [{
            type: 'text',
            text: this.generateEmptyStateTicket(template, figmaContext, instructions)
          }]
        };
      }

      // Generate ticket based on template system
      let ticketContent;
      if (useTemplates && frameData.length > 0) {
        ticketContent = await this.generateTemplatedTicket({
          frameData: frameData[0], // Use first frame for single ticket
          platform,
          documentType,
          techStack,
          projectName,
          organizationId,
          teamStandards,
          figmaContext
        });
      } else {
        ticketContent = this.generateStandardTicket(frameData, template, figmaContext);
      }

      this.logger.timing('Ticket generation', startTime);

      return {
        content: [{
          type: 'text',
          text: ticketContent
        }]
      };

    } catch (error) {
      this.errorHandler.handleToolError('ticket_generator', error, args);
    }
  }

  /**
   * Generate empty state ticket when no frame data provided
   * @param {string} template - Template type
   * @param {Object} figmaContext - Figma context data
   * @param {string} instructions - Additional instructions
   * @returns {string} Empty state ticket
   */
  generateEmptyStateTicket(template, figmaContext, instructions) {
    return `# 🎯 ${template === 'component' ? 'Component' : 'Feature'} Development Task

## 📋 Task Overview
**Status**: Ready for Development
**Type**: ${template.charAt(0).toUpperCase() + template.slice(1)} Implementation
**Priority**: Medium

## 📝 Description
This task involves implementing a ${template} based on the provided design specifications.

${instructions ? `\n## 📋 Additional Instructions\n${instructions}` : ''}

## 🎨 Design Context
${figmaContext.fileName ? `- **File**: ${figmaContext.fileName}` : ''}
${figmaContext.pageTitle ? `- **Page**: ${figmaContext.pageTitle}` : ''}
${figmaContext.fileKey ? `- **Figma URL**: https://www.figma.com/file/${figmaContext.fileKey}` : ''}

## 🔧 Technical Requirements
- [ ] Follow established design system patterns
- [ ] Implement responsive design
- [ ] Add proper accessibility attributes
- [ ] Include unit tests
- [ ] Document component API

## ✅ Definition of Done
- [ ] Component matches design specifications
- [ ] All responsive breakpoints working
- [ ] Accessibility requirements met (WCAG 2.1 AA)
- [ ] Unit tests written and passing
- [ ] Code review completed
- [ ] Documentation updated

---
*Generated by Figma AI Ticket Generator - ${new Date().toLocaleString()}*`;
  }

  /**
   * Generate templated ticket using platform and document type
   * @param {Object} options - Ticket generation options
   * @returns {string} Generated ticket content
   */
  async generateTemplatedTicket(options) {
    const {
      frameData,
      platform,
      documentType,
      techStack,
      projectName,
      // organizationId, // TODO: Use for organization-specific templates
      // teamStandards, // TODO: Integrate team-specific standards
      figmaContext
    } = options;

    // Extract frame information
    const frameName = frameData.name || 'Unnamed Component';
    const frameId = frameData.id || 'unknown';
    const dimensions = frameData.dimensions || { width: 0, height: 0 };

    this.logger.info(`🎫 Generating ${documentType} ticket for ${platform}`, {
      frameName,
      techStack,
      platform
    });

    // Generate platform-specific ticket
    switch (platform) {
    case 'jira':
      return this.generateJiraTicket({
        frameName,
        frameId,
        dimensions,
        documentType,
        techStack,
        projectName,
        figmaContext
      });

    case 'github':
      return this.generateGitHubIssue({
        frameName,
        frameId,
        dimensions,
        documentType,
        techStack,
        projectName,
        figmaContext
      });

    case 'linear':
      return this.generateLinearTicket({
        frameName,
        frameId,
        dimensions,
        documentType,
        techStack,
        projectName,
        figmaContext
      });

    case 'notion':
      return this.generateNotionPage({
        frameName,
        frameId,
        dimensions,
        documentType,
        techStack,
        projectName,
        figmaContext
      });

    default:
      return this.generateEnhancedGenericTicket({
        frameName,
        frameId,
        dimensions,
        documentType,
        techStack,
        projectName,
        figmaContext
      });
    }
  }

  /**
   * Generate JIRA-formatted ticket
   * @param {Object} data - Ticket data
   * @returns {string} JIRA ticket content
   */
  generateJiraTicket(data) {
    const { frameName, frameId, dimensions, documentType, techStack, projectName, figmaContext } = data;

    return `# 🎯 ${documentType === 'component' ? 'Component' : 'Feature'}: ${frameName}

## 📋 User Story
As a developer, I want to implement the ${frameName} ${documentType} so that users can interact with a well-designed, accessible interface element.

## 🎨 Design Specifications
- **Component Name**: ${frameName}
- **Dimensions**: ${dimensions.width}×${dimensions.height}px
- **Frame ID**: \`${frameId}\`
- **Design File**: ${figmaContext.fileName || 'Design System'}

## 🔧 Technical Details
**Tech Stack**: ${techStack.charAt(0).toUpperCase() + techStack.slice(1)}
**Project**: ${projectName}

### Implementation Requirements
- [ ] Create ${techStack} component structure
- [ ] Implement responsive design (mobile, tablet, desktop)
- [ ] Add proper TypeScript types (if using TypeScript)
- [ ] Include accessibility attributes (ARIA labels, keyboard navigation)
- [ ] Add unit tests with ${techStack === 'react' ? 'Jest + React Testing Library' : 'appropriate testing framework'}

## 🎯 Acceptance Criteria
- [ ] Component renders correctly in all supported browsers
- [ ] Responsive behavior matches design specifications
- [ ] All interactive states implemented (hover, focus, active, disabled)
- [ ] Accessibility standards met (WCAG 2.1 AA)
- [ ] Component documentation added to Storybook
- [ ] Unit tests achieve 90%+ coverage

## 🔗 Resources
${figmaContext.fileKey ? `- [Figma Design](https://www.figma.com/file/${figmaContext.fileKey})` : ''}
- Design System Documentation
- ${techStack.charAt(0).toUpperCase() + techStack.slice(1)} Style Guide

## 📊 Effort Estimation
**Story Points**: ${this.estimateStoryPoints(documentType)}
**Estimated Hours**: ${this.estimateHours(documentType)}

---
*Generated: ${new Date().toLocaleString()} | Frame ID: ${frameId}*`;
  }

  /**
   * Generate GitHub Issue
   * @param {Object} data - Issue data
   * @returns {string} GitHub issue content
   */
  generateGitHubIssue(data) {
    const { frameName, frameId, dimensions, documentType, techStack, figmaContext } = data;

    return `## 🎯 ${documentType === 'component' ? 'Component' : 'Feature'} Implementation: ${frameName}

### 📋 Description
Implement the ${frameName} ${documentType} based on the provided Figma design.

### 🎨 Design Reference
- **Component**: ${frameName}
- **Dimensions**: ${dimensions.width}×${dimensions.height}px
- **Frame ID**: \`${frameId}\`
${figmaContext.fileKey ? `- **Figma**: https://www.figma.com/file/${figmaContext.fileKey}` : ''}

### 🔧 Technical Requirements
- [ ] ${techStack.charAt(0).toUpperCase() + techStack.slice(1)} implementation
- [ ] Responsive design
- [ ] Accessibility compliance
- [ ] Unit tests
- [ ] Documentation

### ✅ Acceptance Criteria
- [ ] Matches design specifications
- [ ] Works across all breakpoints
- [ ] Passes accessibility audit
- [ ] Tests pass with >90% coverage
- [ ] Code review approved

### 🏷️ Labels
\`${techStack}\` \`${documentType}\` \`frontend\` \`design-system\`

### 📊 Estimates
**Complexity**: ${this.estimateComplexity(documentType)}
**Priority**: Medium

---
*Auto-generated from Figma design | Frame: ${frameId}*`;
  }

  /**
   * Generate Linear ticket
   * @param {Object} data - Ticket data
   * @returns {string} Linear ticket content
   */
  generateLinearTicket(data) {
    const { frameName, documentType, techStack } = data;

    return `# ${frameName} ${documentType} Implementation

## Overview
Implement ${frameName} ${documentType} using ${techStack}

## Requirements
- Responsive design
- Accessibility compliance
- Unit tests

## Estimate
${this.estimateStoryPoints(documentType)} points`;
  }

  /**
   * Generate standard ticket format
   * @param {Array} frameData - Frame data array
   * @param {string} template - Template type
   * @param {Object} figmaContext - Figma context
   * @returns {string} Standard ticket
   */
  generateStandardTicket(frameData, template, figmaContext) {
    const frame = frameData[0] || {};
    const frameName = frame.name || 'Component';

    return `# 🎯 ${template} Implementation: ${frameName}

## 📋 Task Details
Implement the ${frameName} ${template} based on Figma design specifications.

## 🎨 Design Reference
${figmaContext.fileKey ? `[View in Figma](https://www.figma.com/file/${figmaContext.fileKey})` : 'Design reference attached'}

## 🔧 Implementation Tasks
- [ ] Create component structure
- [ ] Implement styling
- [ ] Add interactivity
- [ ] Write tests
- [ ] Update documentation

## ✅ Definition of Done
- [ ] Code matches design
- [ ] Tests pass
- [ ] Documentation updated

---
*Generated: ${new Date().toLocaleString()}*`;
  }

  /**
   * Generate Notion page format
   * @param {Object} data - Ticket data
   * @returns {string} Notion page content
   */
  generateNotionPage(data) {
    const { frameName, frameId, dimensions, documentType, techStack, figmaContext } = data;

    return `# 📋 ${frameName} ${documentType} Implementation

## 🎯 Overview
Implementation of ${frameName} ${documentType} based on Figma design specifications.

## 🎨 Design Reference
**Figma Frame**: \`${frameId}\`
**Dimensions**: ${dimensions.width}×${dimensions.height}px
${figmaContext.fileKey ? `**URL**: https://www.figma.com/file/${figmaContext.fileKey}` : ''}

## 🔧 Technical Stack
- **Framework**: ${techStack.charAt(0).toUpperCase() + techStack.slice(1)}
- **Type**: ${documentType}

## ✅ Tasks
- [ ] Component structure
- [ ] Styling implementation  
- [ ] Responsive design
- [ ] Accessibility
- [ ] Testing
- [ ] Documentation

## 📊 Status
**Priority**: Medium
**Estimate**: ${this.estimateHours(documentType)}

---
*Created: ${new Date().toLocaleString()}*`;
  }

  /**
   * Generate enhanced generic ticket format with rich content
   * @param {Object} data - Ticket data
   * @returns {string} Enhanced generic ticket
   */
  generateEnhancedGenericTicket(data) {
    const { frameName, frameId, dimensions, documentType, techStack, projectName, figmaContext } = data;

    return `# 🎯 ${documentType.toUpperCase()} Implementation: ${frameName}

## 📋 Project Context
**Project**: ${projectName}
**Component**: ${frameName}
**Type**: ${documentType} development
**Technology**: ${techStack.charAt(0).toUpperCase() + techStack.slice(1)}

## 🎨 Design Specifications
- **Frame ID**: \`${frameId}\`
- **Dimensions**: ${dimensions.width}×${dimensions.height}px
- **Design File**: ${figmaContext.fileName || 'Design System'}
${figmaContext.fileKey ? `- **Figma URL**: https://www.figma.com/file/${figmaContext.fileKey}` : ''}

## 🔧 Implementation Requirements

### Core Features
- [ ] Implement ${frameName} according to design specifications
- [ ] Ensure responsive behavior across all breakpoints
- [ ] Add proper state management (loading, error, success states)
- [ ] Include interactive states (hover, focus, active, disabled)

### Technical Requirements  
- [ ] ${techStack === 'react' ? 'Create React component with TypeScript' : `Implement using ${techStack}`}
- [ ] Follow established coding patterns and architecture
- [ ] Add comprehensive prop interfaces and documentation
- [ ] Implement proper error boundaries and validation

### Quality Assurance
- [ ] Write unit tests with >90% coverage
- [ ] Add integration tests for complex interactions
- [ ] Ensure accessibility compliance (WCAG 2.1 AA)
- [ ] Test across multiple browsers and devices
- [ ] Performance optimization and testing

### Documentation
- [ ] Add Storybook stories for all component variants
- [ ] Document component API and usage examples
- [ ] Include design system integration notes
- [ ] Add troubleshooting and FAQ section

## 🎯 Acceptance Criteria
- [ ] Component renders correctly in all supported environments
- [ ] All interactive elements work as designed
- [ ] Responsive behavior matches design specifications
- [ ] Performance metrics meet established benchmarks
- [ ] Accessibility audit passes with no critical issues
- [ ] Code review approved by team lead
- [ ] Documentation reviewed and approved
- [ ] Integration testing completed successfully

## 📊 Effort Estimation
**Complexity**: ${this.estimateComplexity(documentType)}
**Story Points**: ${this.estimateStoryPoints(documentType)}
**Estimated Hours**: ${this.estimateHours(documentType)}

### Development Breakdown
- **Component Development**: 60% of total effort
- **Testing**: 25% of total effort  
- **Documentation**: 10% of total effort
- **Code Review & Polish**: 5% of total effort

## 🔗 Resources and References
${figmaContext.fileKey ? `- [Figma Design](https://www.figma.com/file/${figmaContext.fileKey})` : ''}
- Design System Documentation
- ${techStack.charAt(0).toUpperCase() + techStack.slice(1)} Style Guide  
- Component Architecture Guidelines
- Testing Standards and Examples

## 🏷️ Labels and Categories
\`${techStack}\` \`${documentType}\` \`frontend\` \`design-system\` \`${this.estimateComplexity(documentType).toLowerCase()}-complexity\`

---
*Auto-generated ticket • Created: ${new Date().toLocaleString()} • Frame: ${frameId}*`;
  }

  /**
   * Estimate story points based on document type
   * @param {string} documentType - Type of document
   * @returns {number} Story points
   */
  estimateStoryPoints(documentType) {
    const estimates = {
      component: 3,
      feature: 5,
      code: 2
    };
    return estimates[documentType] || 3;
  }

  /**
   * Estimate hours based on document type
   * @param {string} documentType - Type of document
   * @returns {string} Hour estimate
   */
  estimateHours(documentType) {
    const estimates = {
      component: '4-6 hours',
      feature: '8-12 hours',
      code: '2-4 hours'
    };
    return estimates[documentType] || '4-6 hours';
  }

  /**
   * Estimate complexity based on document type
   * @param {string} documentType - Type of document
   * @returns {string} Complexity level
   */
  estimateComplexity(documentType) {
    const complexity = {
      component: 'Medium',
      feature: 'High',
      code: 'Low'
    };
    return complexity[documentType] || 'Medium';
  }
}