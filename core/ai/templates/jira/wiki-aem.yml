template_id: "jira_wiki_aem"
version: "1.0.0"
organization: "default"
platform: "jira"
description: "Jira wiki/guide template for AEM component implementation documentation with HTL, OSGi, and Touch UI guidance"

variables:
  project_name: "{{ project.name }}"
  component_name: "{{ figma.component_name }}"
  issue_type: "Epic"
  component_type: "{{ project.component_type }}"
  priority: "{{ calculated.priority }}"
  assignee: "{{ team.assignee }}"
  reporter: "{{ user.name }}"
  labels: "{{ project.labels }}"
  technologies: "{{ project.tech_stack }}"
  story_points: "{{ calculated.story_points }}"
  figma_url: "{{ figma.live_link }}"
  design_status: "{{ figma.design_status }}"
  resource_type: "project/components/{{ figma.component_name | lowercase }}"
  component_group: "project-components"

team_standards:
  testing_framework: "aem-mocks"
  accessibility_level: "wcag-aa"
  documentation_format: "markdown"
  code_style: "aem-coding-standards"
  review_process: "adobe-standards"

output_format:
  ticket_type: "Epic"
  sections: ["header", "overview", "implementation_guide", "code_examples", "testing_guide", "deployment_guide", "design_reference"]
  formatting:
    use_emojis: true
    include_diagrams: true
    code_highlighting: true
    table_formatting: true
    link_formatting: true
  ai_context_markers: true
  include_metadata: true

customization:
  include_ai_context_markers: true
  generate_test_files: true
  create_storybook_stories: false
  add_accessibility_checklist: true
  include_performance_metrics: true
  enable_automated_testing: true
  include_design_tokens: true
  add_similar_components: true
  include_risk_assessment: true
  generate_aem_code: true
  include_osgi_config: true
  add_jcr_structure: true

content: |
  # 📚 AEM Component Implementation Guide: {{ component_name }}

  **Priority**: {{ calculated.priority }} | **Story Points**: {{ calculated.story_points }}

  **🔗 Figma Design**: [View Component]({{ figma.url }})

  <!-- START: requirements -->
  ## 🎯 Objective
  Complete implementation guide for the **{{ component_name }}** component in AEM 6.5 using HTL (HTML Template Language), Sling Models, OSGi bundles, and Touch UI components.

  ## 📐 Design Specifications
  - **Component Name**: {{ component_name }}
  - **Dimensions**: {{ figma.dimensions.width }}×{{ figma.dimensions.height }}px
  - **Complexity**: {{ calculated.complexity }}
  - **AEM Resource Type**: `{{ resource_type }}`

  ## 📊 Intelligence Analysis

  **Estimated Complexity:** {{ calculated.complexity }} ({{ calculated.hours }} hours)
  ├── 📊 **Confidence Level:** {{ calculated.confidence }}%
  ├── ⚡ **Similar Components:** {{ similar_components.names }}
  ├── 🏗️ **Architecture Pattern:** Touch UI Component with Sling Model
  └── 🧪 **Testing Approach:** AEM Mocks + JUnit + wcm.io

  <!-- END: requirements -->

  <!-- START: implementation_guide -->
  ## 🏗️ HTL Implementation Guide

  ### 📁 Component Structure
  Create the following directory structure in your AEM project:

  ```
  /apps/project/components/content/{{ component_name | lowercase }}/
  ├── {{ component_name | lowercase }}.html              # HTL template
  ├── .content.xml                                       # Component definition
  ├── _cq_dialog/
  │   └── .content.xml                                   # Touch UI dialog
  ├── _cq_design_dialog/                                 # Design dialog (optional)
  │   └── .content.xml
  ├── clientlibs/
  │   ├── .content.xml                                   # Client library config
  │   ├── css/
  │   │   └── {{ component_name | lowercase }}.less     # Component styles
  │   └── js/
  │       └── {{ component_name | lowercase }}.js       # Component behavior
  └── {{ component_name }}Model.java                    # Sling Model
  ```

  ### 🎯 HTL Template Implementation

  **File**: `{{ component_name | lowercase }}.html`

  ```html
  <!--/* {{ component_name }} AEM Component */-->
  <div data-sly-use.model="com.project.core.models.{{ component_name }}Model"
       class="cmp-{{ component_name | lowercase }} ${model.cssClasses @ context='attribute'}"
       data-cmp-is="project/components/content/{{ component_name | lowercase }}"
       data-cmp-initialized>
       
      <!--/* Component Title */-->
      <div data-sly-test="${model.title}" 
           class="cmp-{{ component_name | lowercase }}__title">
          <h2 class="cmp-{{ component_name | lowercase }}__title-text">
              ${model.title @ context='html'}
          </h2>
      </div>
      
      <!--/* Component Description */-->
      <div data-sly-test="${model.description}" 
           class="cmp-{{ component_name | lowercase }}__description">
          <div class="cmp-{{ component_name | lowercase }}__description-text">
              ${model.description @ context='html'}
          </div>
      </div>
      
      <!--/* Additional content based on Figma design */-->
      <div data-sly-test="${model.hasContent}" 
           class="cmp-{{ component_name | lowercase }}__content">
          <!-- Implement based on specific design requirements -->
      </div>
      
  </div>
  ```

  ### ☕ Sling Model Implementation

  **File**: `{{ component_name }}Model.java`

  ```java
  package com.project.core.models;

  import javax.annotation.PostConstruct;
  import org.apache.sling.api.resource.Resource;
  import org.apache.sling.models.annotations.DefaultInjectionStrategy;
  import org.apache.sling.models.annotations.Model;
  import org.apache.sling.models.annotations.ValueMapValue;
  import org.apache.sling.models.annotations.injectorspecific.ValueMapValue;
  import org.slf4j.Logger;
  import org.slf4j.LoggerFactory;

  @Model(adaptables = Resource.class, 
         defaultInjectionStrategy = DefaultInjectionStrategy.OPTIONAL)
  public class {{ component_name }}Model {

      private static final Logger LOG = LoggerFactory.getLogger({{ component_name }}Model.class);

      @ValueMapValue
      private String title;

      @ValueMapValue
      private String description;

      @ValueMapValue
      private String imageUrl;

      @ValueMapValue
      private String linkUrl;

      @PostConstruct
      protected void init() {
          LOG.debug("Initializing {{ component_name }} component");
          // Additional initialization logic
      }

      // Getters
      public String getTitle() { 
          return title; 
      }

      public String getDescription() { 
          return description; 
      }

      public String getImageUrl() { 
          return imageUrl; 
      }

      public String getLinkUrl() { 
          return linkUrl; 
      }

      public boolean hasContent() {
          return title != null || description != null;
      }

      public String getCssClasses() {
          StringBuilder classes = new StringBuilder("cmp-{{ component_name | lowercase }}");
          
          if (hasContent()) {
              classes.append(" cmp-{{ component_name | lowercase }}--has-content");
          }
          
          return classes.toString();
      }
  }
  ```

  ### 🎛️ Touch UI Dialog Configuration

  **File**: `_cq_dialog/.content.xml`

  ```xml
  <?xml version="1.0" encoding="UTF-8"?>
  <jcr:root xmlns:sling="http://sling.apache.org/jcr/sling/1.0"
            xmlns:granite="http://www.adobe.com/jcr/granite/1.0"
            xmlns:cq="http://www.day.com/jcr/cq/1.0"
            xmlns:jcr="http://www.jcp.org/jcr/1.0"
            xmlns:nt="http://www.jcp.org/jcr/nt/1.0"
            jcr:primaryType="nt:unstructured"
            jcr:title="{{ component_name }}"
            sling:resourceType="cq/gui/components/authoring/dialog"
            extraClientlibs="[core.wcm.components.commons.editor.dialog]"
            helpPath="https://www.adobe.com/go/aem_cmp_text_v2"
            trackingFeature="core-components:text:v2">
      <content
          jcr:primaryType="nt:unstructured"
          sling:resourceType="granite/ui/components/coral/foundation/container">
          <items jcr:primaryType="nt:unstructured">
              <tabs
                  jcr:primaryType="nt:unstructured"
                  sling:resourceType="granite/ui/components/coral/foundation/tabs"
                  maximized="{Boolean}true">
                  <items jcr:primaryType="nt:unstructured">
                      <content
                          jcr:primaryType="nt:unstructured"
                          jcr:title="Content"
                          sling:resourceType="granite/ui/components/coral/foundation/container"
                          margin="{Boolean}true">
                          <items jcr:primaryType="nt:unstructured">
                              <title
                                  jcr:primaryType="nt:unstructured"
                                  sling:resourceType="granite/ui/components/coral/foundation/form/textfield"
                                  fieldLabel="Title"
                                  name="./title"
                                  required="{Boolean}false"/>
                              <description
                                  jcr:primaryType="nt:unstructured"
                                  sling:resourceType="cq/gui/components/authoring/dialog/richtext"
                                  fieldLabel="Description"
                                  name="./description"
                                  useFixedInlineToolbar="{Boolean}true">
                                  <rtePlugins jcr:primaryType="nt:unstructured">
                                      <format
                                          jcr:primaryType="nt:unstructured"
                                          features="*"/>
                                      <links
                                          jcr:primaryType="nt:unstructured"
                                          features="*"/>
                                  </rtePlugins>
                              </description>
                              <image
                                  jcr:primaryType="nt:unstructured"
                                  sling:resourceType="granite/ui/components/coral/foundation/form/pathfield"
                                  fieldLabel="Image"
                                  name="./imageUrl"
                                  rootPath="/content/dam"/>
                          </items>
                      </content>
                      <styling
                          jcr:primaryType="nt:unstructured"
                          jcr:title="Styling"
                          sling:resourceType="granite/ui/components/coral/foundation/container"
                          margin="{Boolean}true">
                          <items jcr:primaryType="nt:unstructured">
                              <layout
                                  jcr:primaryType="nt:unstructured"
                                  sling:resourceType="granite/ui/components/coral/foundation/form/select"
                                  fieldLabel="Layout Variant"
                                  name="./layoutVariant">
                                  <items jcr:primaryType="nt:unstructured">
                                      <default
                                          jcr:primaryType="nt:unstructured"
                                          text="Default"
                                          value="default"/>
                                      <featured
                                          jcr:primaryType="nt:unstructured"
                                          text="Featured"
                                          value="featured"/>
                                  </items>
                              </layout>
                          </items>
                      </styling>
                  </items>
              </tabs>
          </items>
      </content>
  </jcr:root>
  ```

  <!-- END: implementation_guide -->

  <!-- START: testing_strategy -->
  ## 🧪 AEM Testing Strategy

  ### Unit Testing with AEM Mocks

  **File**: `{{ component_name }}ModelTest.java`

  ```java
  package com.project.core.models;

  import static org.junit.jupiter.api.Assertions.*;
  import org.apache.sling.api.resource.Resource;
  import org.junit.jupiter.api.BeforeEach;
  import org.junit.jupiter.api.Test;
  import org.junit.jupiter.api.extension.ExtendWith;
  import io.wcm.testing.mock.aem.junit5.AemContext;
  import io.wcm.testing.mock.aem.junit5.AemContextExtension;

  @ExtendWith(AemContextExtension.class)
  class {{ component_name }}ModelTest {

      private final AemContext context = new AemContext();
      private {{ component_name }}Model model;

      @BeforeEach
      void setUp() {
          context.addModelsForClasses({{ component_name }}Model.class);
      }

      @Test
      void testModelWithValidProperties() {
          // Given
          context.currentResource("/content/test")
              .property("title", "Test Title")
              .property("description", "Test Description");

          // When
          model = context.currentResource().adaptTo({{ component_name }}Model.class);

          // Then
          assertNotNull(model);
          assertEquals("Test Title", model.getTitle());
          assertEquals("Test Description", model.getDescription());
          assertTrue(model.hasContent());
      }

      @Test
      void testModelWithEmptyProperties() {
          // Given
          context.currentResource("/content/empty");

          // When  
          model = context.currentResource().adaptTo({{ component_name }}Model.class);

          // Then
          assertNotNull(model);
          assertNull(model.getTitle());
          assertNull(model.getDescription());
          assertFalse(model.hasContent());
      }

      @Test
      void testCssClasses() {
          // Given
          context.currentResource("/content/styled")
              .property("title", "Styled Title");

          // When
          model = context.currentResource().adaptTo({{ component_name }}Model.class);

          // Then
          String cssClasses = model.getCssClasses();
          assertTrue(cssClasses.contains("cmp-{{ component_name | lowercase }}"));
          assertTrue(cssClasses.contains("cmp-{{ component_name | lowercase }}--has-content"));
      }
  }
  ```

  ### Integration Testing with wcm.io

  **Maven Dependencies** (add to your `pom.xml`):

  ```xml
  <dependencies>
      <!-- AEM Mocks -->
      <dependency>
          <groupId>io.wcm</groupId>
          <artifactId>io.wcm.testing.aem-mock.junit5</artifactId>
          <version>4.1.8</version>
          <scope>test</scope>
      </dependency>
      
      <!-- JUnit 5 -->
      <dependency>
          <groupId>org.junit.jupiter</groupId>
          <artifactId>junit-jupiter</artifactId>
          <version>5.8.2</version>
          <scope>test</scope>
      </dependency>
  </dependencies>
  ```

  <!-- END: testing_strategy -->

  <!-- START: deployment_guide -->
  ## 🚀 AEM Deployment Guide

  ### Maven Build Configuration

  **Component Maven Module** (`pom.xml`):

  ```xml
  <project>
      <modelVersion>4.0.0</modelVersion>
      <groupId>com.project</groupId>
      <artifactId>project.ui.apps</artifactId>
      <packaging>content-package</packaging>
      <name>Project - UI Apps</name>

      <build>
          <plugins>
              <plugin>
                  <groupId>org.apache.jackrabbit</groupId>
                  <artifactId>filevault-package-maven-plugin</artifactId>
                  <configuration>
                      <filters>
                          <filter>
                              <root>/apps/project/components/content/{{ component_name | lowercase }}</root>
                          </filter>
                          <filter>
                              <root>/etc/clientlibs/project/components/{{ component_name | lowercase }}</root>
                          </filter>
                      </filters>
                  </configuration>
              </plugin>
          </plugins>
      </build>
  </project>
  ```

  ### Content Package Structure

  ```
  ui.apps/src/main/content/jcr_root/
  ├── apps/project/components/content/{{ component_name | lowercase }}/
  └── etc/clientlibs/project/components/{{ component_name | lowercase }}/
  ```

  ### Client Library Configuration

  **File**: `clientlibs/.content.xml`

  ```xml
  <?xml version="1.0" encoding="UTF-8"?>
  <jcr:root xmlns:cq="http://www.day.com/jcr/cq/1.0"
            xmlns:jcr="http://www.jcp.org/jcr/1.0"
            jcr:primaryType="cq:ClientLibraryFolder"
            categories="[project.components.{{ component_name | lowercase }}]"
            dependencies="[project.base,granite.jquery]"
            embed="[project.components.{{ component_name | lowercase }}.authoring]"/>
  ```

  ### OSGi Bundle Configuration

  If your component requires OSGi services, create the configuration:

  **File**: `{{ component_name }}ServiceImpl.java`

  ```java
  @Component(service = {{ component_name }}Service.class,
            configurationPid = "com.project.core.services.{{ component_name }}Service")
  @Designate(ocd = {{ component_name }}ServiceImpl.Config.class)
  public class {{ component_name }}ServiceImpl implements {{ component_name }}Service {

      @ObjectClassDefinition(name = "{{ component_name }} Service Configuration")
      public @interface Config {
          @AttributeDefinition(name = "Service Enabled")
          boolean enabled() default true;
      }

      @Activate
      protected void activate(Config config) {
          // Service activation logic
      }
  }
  ```

  <!-- END: deployment_guide -->

  <!-- START: design_reference -->
  ## 🎨 Design Reference

  {{#if figma.design_tokens}}
  ### Design Tokens

  **Colors:**
  {{#each figma.design_tokens.colors}}
  - `--{{ @key }}`: {{ this }}
  {{/each}}

  **Typography:**
  {{#each figma.design_tokens.typography}}
  - `--font-{{ @key }}`: {{ this }}
  {{/each}}

  **Spacing:**
  {{#each figma.design_tokens.spacing}}
  - `--spacing-{{ @key }}`: {{ this }}
  {{/each}}
  {{/if}}

  ### Component Styling (LESS)

  **File**: `clientlibs/css/{{ component_name | lowercase }}.less`

  ```less
  .cmp-{{ component_name | lowercase }} {
      // Base component styles
      display: block;
      padding: var(--spacing-medium, 16px);
      
      &__title {
          margin-bottom: var(--spacing-small, 8px);
          
          &-text {
              font-family: var(--font-heading, inherit);
              font-size: var(--font-size-h2, 1.5rem);
              color: var(--color-text-primary, #333);
              margin: 0;
          }
      }
      
      &__description {
          margin-bottom: var(--spacing-medium, 16px);
          
          &-text {
              font-family: var(--font-body, inherit);
              font-size: var(--font-size-body, 1rem);
              line-height: var(--line-height-body, 1.5);
              color: var(--color-text-secondary, #666);
          }
      }
      
      &__content {
          // Additional content styling based on design
      }
      
      // Responsive breakpoints
      @media (max-width: 768px) {
          padding: var(--spacing-small, 8px);
          
          &__title-text {
              font-size: var(--font-size-h3, 1.25rem);
          }
      }
      
      // Component variants
      &--featured {
          background-color: var(--color-background-featured, #f5f5f5);
          border-left: 4px solid var(--color-accent, #007bff);
      }
  }
  ```

  ![Component Screenshot]({{ figma.screenshot_url }})

  <!-- END: design_reference -->

  ## ✅ Implementation Checklist

  ### 🏗️ Development Tasks
  - [ ] Create AEM component folder structure
  - [ ] Implement HTL template with semantic markup
  - [ ] Create Sling Model with business logic
  - [ ] Configure Touch UI dialog for authoring
  - [ ] Implement responsive LESS/CSS styles
  - [ ] Add client-side JavaScript if needed
  - [ ] Configure OSGi services (if required)

  ### 🧪 Testing Tasks
  - [ ] Write JUnit tests for Sling Model
  - [ ] Create AEM Mock integration tests
  - [ ] Test Touch UI dialog functionality
  - [ ] Validate HTL template rendering
  - [ ] Perform cross-browser testing
  - [ ] Run accessibility audit (axe-core)
  - [ ] Test responsive design breakpoints

  ### 🚀 Deployment Tasks
  - [ ] Build content package with Maven
  - [ ] Deploy to AEM development environment
  - [ ] Test component in AEM authoring interface
  - [ ] Validate component on publish instance
  - [ ] Performance testing and optimization
  - [ ] Update component documentation
  - [ ] Code review and approval

  ### ♿ Accessibility Validation
  - [ ] Semantic HTML structure validation
  - [ ] ARIA labels and roles implementation
  - [ ] Keyboard navigation testing
  - [ ] Screen reader compatibility
  - [ ] Color contrast compliance (WCAG AA)
  - [ ] Focus management verification

  ---

  **🏗️ AEM Architecture**: Touch UI Component | **⏱️ Estimated Hours**: {{ calculated.hours }} | **🎯 Confidence**: {{ calculated.confidence }}%