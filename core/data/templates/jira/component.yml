template_id: "jira_component_development"
version: "2.1.0"
organization: "default"
platform: "jira"
description: "Professional Jira ticket template following standard format with variable substitution"

variables:
  project_name: "{{ project.name }}"
  component_name: "{{ figma.component_name }}"
  issue_type: "Task"
  component_type: "{{ project.component_type }}"
  priority: "{{ calculated.priority }}"
  assignee: "{{ team.assignee }}"
  reporter: "{{ user.name }}"
  labels: "{{ project.labels }}"
  technologies: "{{ project.tech_stack }}"
  story_points: "{{ calculated.story_points }}"
  figma_url: "{{ figma.live_link }}"
  screenshot_filename: "{{ figma.screenshot_url || figma.screenshot_filename }}"
  design_status: "{{ figma.design_status }}"

team_standards:
  testing_framework: "jest-rtl"
  accessibility_level: "wcag-aa"
  documentation_format: "markdown"
  code_style: "prettier"
  review_process: "design-review"

output_format:
  ticket_type: "Story"
  sections: ["header", "description", "technical_requirements", "implementation_notes", "testing_strategy", "design_reference", "estimation"]
  formatting:
    use_emojis: false
    include_diagrams: false
    code_highlighting: true
    table_formatting: true
    link_formatting: true
  ai_context_markers: true
  include_metadata: true

customization:
  include_ai_context_markers: true
  generate_test_files: true
  create_storybook_stories: true
  add_accessibility_checklist: true
  include_performance_metrics: false
  enable_automated_testing: true
  include_design_tokens: true
  add_similar_components: true
  include_risk_assessment: true

# Template content following exact Jira format
content: |
  **Project:** {{ project_name }}
  **Issue Type:** {{ issue_type }}
  **Summary:** {{ component_name }} Component Implementation
  **Component:** {{ component_type }}
  **Priority:** {{ priority }}
  **Assignee:** {{ assignee }}
  **Reporter:** {{ reporter }}
  **Labels:** {{ labels }}
  **Tech Stack:** {{ technologies }}

  ## Description
  
  Implement the **{{ component_name }}** component based on Figma design specifications for {{ project_name }}. This component will enhance our design system capabilities and provide users with a consistent, accessible interface element.

  {{ #calculated.design_analysis }}
  ### AI Design Analysis
  {{ calculated.design_analysis }}
  {{ /calculated.design_analysis }}

  ### Business Value
  - Consistent user experience across the platform
  - Improved accessibility and usability
  - Reusable component for faster development
  - Design system standardization

  ## Technical Requirements

  ### Core Implementation
  - [ ] Create {{ component_name }} component with TypeScript interfaces
  - [ ] Implement responsive design following breakpoint standards
  - [ ] Integrate with design system tokens and theming
  - [ ] Add comprehensive accessibility features (ARIA, keyboard navigation)
  - [ ] Ensure cross-browser compatibility (Chrome, Firefox, Safari, Edge)

  ### Design System Integration
  - [ ] Use design tokens for colors, spacing, typography
  {{ #figma.extracted_colors }}
  - [ ] Implement detected color palette: {{ figma.extracted_colors }}
  {{ /figma.extracted_colors }}
  {{ #figma.extracted_typography }}
  - [ ] Apply typography system: {{ figma.extracted_typography }}
  {{ /figma.extracted_typography }}
  - [ ] Follow established component patterns and conventions
  - [ ] Implement proper prop interfaces and validation
  - [ ] Add theme support and CSS custom properties

  ### Code Quality
  - [ ] Write comprehensive unit tests (target: 90%+ coverage)
  - [ ] Add integration tests for complex interactions
  - [ ] Document component API and usage examples
  - [ ] Follow established coding standards and linting rules

  ## Acceptance Criteria

  ### Functional Requirements
  - [ ] Component renders correctly with all specified props
  - [ ] All interactive states work as designed (hover, focus, active, disabled)
  - [ ] Component handles edge cases and error states gracefully
  - [ ] Performance meets established benchmarks
  - [ ] Component is fully keyboard accessible

  ### Quality Assurance
  - [ ] Passes all accessibility audits (WCAG 2.1 AA compliance)
  - [ ] Unit tests achieve minimum 90% code coverage
  - [ ] No console errors or warnings in development/production
  - [ ] Visual regression tests pass for all supported browsers
  - [ ] Component documentation includes usage examples and API reference

  ## Implementation Details

  ### Technology Stack
  - **Framework:** {{ technologies }}
  - **Testing:** Jest + React Testing Library
  - **Code Style:** Prettier + ESLint
  - **Accessibility:** WCAG 2.1 AA

  ### Design Reference
  - **Figma Design:** {{ figma.live_link }}
  - **Design Status:** {{ figma.design_status }}
  - **Screenshot:** {{ figma.screenshot_url || figma.screenshot_filename }}
  - **File Key:** {{ figma.file_id }}

  ### ðŸ“¸ Visual Reference
  {{ figma.screenshot_markdown.jira }}
  {{ figma.screenshot_attachment.copy_paste_note }}

  ### Development Notes
  - Use established hooks and patterns from the design system
  - Implement proper error boundaries for component isolation
  - Consider performance implications for large-scale usage
  - Ensure component works in both light and dark themes

  ## Testing Strategy

  ### Automated Tests
  - [ ] Unit tests for all component logic and rendering
  - [ ] Accessibility tests using axe-core
  - [ ] Visual regression tests for UI consistency
  - [ ] Integration tests with related components
  - [ ] Performance tests for render time and memory usage

  ### Manual Testing
  - [ ] Cross-browser compatibility testing
  - [ ] Keyboard navigation testing
  - [ ] Screen reader compatibility testing
  - [ ] Mobile responsiveness testing
  - [ ] Edge case and error state testing

  ## Definition of Done
  - [ ] All acceptance criteria met
  - [ ] Code reviewed and approved by team
  - [ ] All tests passing in CI/CD pipeline
  - [ ] Documentation updated and published
  - [ ] Component deployed to design system library
  - [ ] Usage examples added to Storybook
  - [ ] Accessibility audit completed and passed

  ---

  **Estimation:** {{ story_points }} Story Points
  **Complexity:** {{ calculated.complexity }}
  **Due Date:** {{ project.due_date }}